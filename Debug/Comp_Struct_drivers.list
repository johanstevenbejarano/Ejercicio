
Comp_Struct_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002924  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e18  08008e18  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e20  08008e20  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000088  08008eb0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08008eb0  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001166e  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002add  00000000  00000000  00031769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00034248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b86  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ea9  00000000  00000000  00035cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013af0  00000000  00000000  0005db87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed918  00000000  00000000  00071677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004648  00000000  00000000  0015ef90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001635d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064dc 	.word	0x080064dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080064dc 	.word	0x080064dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <keyboard_init>:

/**
 * @brief This functions initialize the functionality of the keypad
 */
void keyboard_init(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	// Configure the row pins as outputs and set them high
	 ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000578:	619a      	str	r2, [r3, #24]
	 ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <keyboard_init+0x2c>)
 800057c:	2208      	movs	r2, #8
 800057e:	619a      	str	r2, [r3, #24]
	 ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <keyboard_init+0x2c>)
 8000582:	2220      	movs	r2, #32
 8000584:	619a      	str	r2, [r3, #24]
	 ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <keyboard_init+0x2c>)
 8000588:	2210      	movs	r2, #16
 800058a:	619a      	str	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400

0800059c <keyboard_handler>:
 * @brief  This function debounces and identify keypad events.
 * @param  column_to_evaluate: the column where the event happened.
 * @retval 0xFF -> invalid key. [0x00 - 0x0F] -> valid key.
 */
uint16_t keyboard_handler(uint16_t column_to_evaluate)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	uint16_t key_pressed = 0xFF; // Value to return
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	81fb      	strh	r3, [r7, #14]
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) // less than KEY_DEBOUNCE_MS since last press. Probably noise
 80005aa:	f000 ffd9 	bl	8001560 <HAL_GetTick>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4ba0      	ldr	r3, [pc, #640]	; (8000834 <keyboard_handler+0x298>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3364      	adds	r3, #100	; 0x64
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d801      	bhi.n	80005be <keyboard_handler+0x22>
	{
		return key_pressed; // return 0xFF
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	e1a8      	b.n	8000910 <keyboard_handler+0x374>
	}
	last_pressed_tick = HAL_GetTick();
 80005be:	f000 ffcf 	bl	8001560 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a9b      	ldr	r2, [pc, #620]	; (8000834 <keyboard_handler+0x298>)
 80005c6:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ce:	d012      	beq.n	80005f6 <keyboard_handler+0x5a>
 80005d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d4:	f300 818e 	bgt.w	80008f4 <keyboard_handler+0x358>
 80005d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005dc:	f000 80c9 	beq.w	8000772 <keyboard_handler+0x1d6>
 80005e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e4:	f300 8186 	bgt.w	80008f4 <keyboard_handler+0x358>
 80005e8:	2b80      	cmp	r3, #128	; 0x80
 80005ea:	f000 8127 	beq.w	800083c <keyboard_handler+0x2a0>
 80005ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005f2:	d05d      	beq.n	80006b0 <keyboard_handler+0x114>
 80005f4:	e17e      	b.n	80008f4 <keyboard_handler+0x358>
	{
	case COLUMN_1_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 80005f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fe:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000600:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <keyboard_handler+0x29c>)
 8000602:	2208      	movs	r2, #8
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000606:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <keyboard_handler+0x29c>)
 8000608:	2220      	movs	r2, #32
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800060c:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <keyboard_handler+0x29c>)
 800060e:	2210      	movs	r2, #16
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin)
 8000612:	4b89      	ldr	r3, [pc, #548]	; (8000838 <keyboard_handler+0x29c>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <keyboard_handler+0x88>
		{
			key_pressed = 0x01; // if column 1 is still high -> column 1 + row 1 = key 1
 800061e:	2301      	movs	r3, #1
 8000620:	81fb      	strh	r3, [r7, #14]
			break;
 8000622:	e174      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin;  // turn on row 2
 800062e:	4b82      	ldr	r3, [pc, #520]	; (8000838 <keyboard_handler+0x29c>)
 8000630:	2208      	movs	r2, #8
 8000632:	619a      	str	r2, [r3, #24]
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;   // turn off row 3
 8000634:	4b80      	ldr	r3, [pc, #512]	; (8000838 <keyboard_handler+0x29c>)
 8000636:	2220      	movs	r2, #32
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;   // turn off row 4
 800063a:	4b7f      	ldr	r3, [pc, #508]	; (8000838 <keyboard_handler+0x29c>)
 800063c:	2210      	movs	r2, #16
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin)
 8000640:	4b7d      	ldr	r3, [pc, #500]	; (8000838 <keyboard_handler+0x29c>)
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <keyboard_handler+0xb6>
		{
			key_pressed = 0x04; // if column 1 is still high -> column 1 + row 2 = key 4
 800064c:	2304      	movs	r3, #4
 800064e:	81fb      	strh	r3, [r7, #14]
			break;
 8000650:	e15d      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;   // turn off row 1
 8000652:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800065c:	4b76      	ldr	r3, [pc, #472]	; (8000838 <keyboard_handler+0x29c>)
 800065e:	2208      	movs	r2, #8
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin;  // turn on row 3
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <keyboard_handler+0x29c>)
 8000664:	2220      	movs	r2, #32
 8000666:	619a      	str	r2, [r3, #24]
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;   // turn off row 4
 8000668:	4b73      	ldr	r3, [pc, #460]	; (8000838 <keyboard_handler+0x29c>)
 800066a:	2210      	movs	r2, #16
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin)
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <keyboard_handler+0x29c>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <keyboard_handler+0xe4>
		{
			key_pressed = 0x07; // if column 1 is still high -> column 1 + row 3 = key 7
 800067a:	2307      	movs	r3, #7
 800067c:	81fb      	strh	r3, [r7, #14]
			break;
 800067e:	e146      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;	// turn off row 4
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;	// turn off row 4
 800068a:	4b6b      	ldr	r3, [pc, #428]	; (8000838 <keyboard_handler+0x29c>)
 800068c:	2208      	movs	r2, #8
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000690:	4b69      	ldr	r3, [pc, #420]	; (8000838 <keyboard_handler+0x29c>)
 8000692:	2220      	movs	r2, #32
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <keyboard_handler+0x29c>)
 8000698:	2210      	movs	r2, #16
 800069a:	619a      	str	r2, [r3, #24]
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin)
 800069c:	4b66      	ldr	r3, [pc, #408]	; (8000838 <keyboard_handler+0x29c>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 812b 	beq.w	8000900 <keyboard_handler+0x364>
		{
			key_pressed = 0x0E; // if column 1 is still high -> column 1 + row 4 = key *
 80006aa:	230e      	movs	r3, #14
 80006ac:	81fb      	strh	r3, [r7, #14]
			break;
 80006ae:	e12e      	b.n	800090e <keyboard_handler+0x372>
		}
		break;


	case COLUMN_2_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 80006b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b8:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 80006ba:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <keyboard_handler+0x29c>)
 80006bc:	2208      	movs	r2, #8
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <keyboard_handler+0x29c>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <keyboard_handler+0x29c>)
 80006c8:	2210      	movs	r2, #16
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin)
 80006cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <keyboard_handler+0x144>
		{
			key_pressed = 0x02; // if column 2 is still high -> column 2 + row 1 = key 2
 80006da:	2302      	movs	r3, #2
 80006dc:	81fb      	strh	r3, [r7, #14]
			break;
 80006de:	e116      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80006e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin;  // turn on row 2
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <keyboard_handler+0x29c>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	619a      	str	r2, [r3, #24]
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;   // turn off row 3
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <keyboard_handler+0x29c>)
 80006f2:	2220      	movs	r2, #32
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;	// turn off row 4
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <keyboard_handler+0x29c>)
 80006f8:	2210      	movs	r2, #16
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin)
 80006fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <keyboard_handler+0x174>
		{
			key_pressed = 0x05; // if column 2 is still high -> column 2 + row 2 = key 5
 800070a:	2305      	movs	r3, #5
 800070c:	81fb      	strh	r3, [r7, #14]
			break;
 800070e:	e0fe      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;	// turn off row 1
 8000710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <keyboard_handler+0x29c>)
 800071c:	2208      	movs	r2, #8
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin;  // turn on row 3
 8000720:	4b45      	ldr	r3, [pc, #276]	; (8000838 <keyboard_handler+0x29c>)
 8000722:	2220      	movs	r2, #32
 8000724:	619a      	str	r2, [r3, #24]
		ROW_4_GPIO_Port->BRR = ROW_4_Pin; 	// turn off row 4
 8000726:	4b44      	ldr	r3, [pc, #272]	; (8000838 <keyboard_handler+0x29c>)
 8000728:	2210      	movs	r2, #16
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin)
 800072c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <keyboard_handler+0x1a4>
		{
			key_pressed = 0x08; // if column 2 is still high -> column 2 + row 3 = key 8
 800073a:	2308      	movs	r3, #8
 800073c:	81fb      	strh	r3, [r7, #14]
			break;
 800073e:	e0e6      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;	// turn off row 1
 8000740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;	// turn off row 2
 800074a:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <keyboard_handler+0x29c>)
 800074c:	2208      	movs	r2, #8
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <keyboard_handler+0x29c>)
 8000752:	2220      	movs	r2, #32
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin;	// turn on row 4
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <keyboard_handler+0x29c>)
 8000758:	2210      	movs	r2, #16
 800075a:	619a      	str	r2, [r3, #24]
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin)
 800075c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 80cc 	beq.w	8000904 <keyboard_handler+0x368>
		{
			key_pressed = 0x00; // if column 2 is still high -> column 2 + row 4 = key 0
 800076c:	2300      	movs	r3, #0
 800076e:	81fb      	strh	r3, [r7, #14]
			break;
 8000770:	e0cd      	b.n	800090e <keyboard_handler+0x372>
		}
		break;

	case COLUMN_3_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077a:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <keyboard_handler+0x29c>)
 800077e:	2208      	movs	r2, #8
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <keyboard_handler+0x29c>)
 8000784:	2220      	movs	r2, #32
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <keyboard_handler+0x29c>)
 800078a:	2210      	movs	r2, #16
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin)
 800078e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <keyboard_handler+0x206>
		{
			key_pressed = 0x03; // if column 3 is still high -> column 3 + row 1 = key 3
 800079c:	2303      	movs	r3, #3
 800079e:	81fb      	strh	r3, [r7, #14]
			break;
 80007a0:	e0b5      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80007a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin;  // turn on row 2
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <keyboard_handler+0x29c>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	619a      	str	r2, [r3, #24]
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;   // turn off row 3
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <keyboard_handler+0x29c>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;	// turn off row 4
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <keyboard_handler+0x29c>)
 80007ba:	2210      	movs	r2, #16
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin)
 80007be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <keyboard_handler+0x236>
		{
			key_pressed = 0x06; // if column 3 is still high -> column 3 + row 2 = key 6
 80007cc:	2306      	movs	r3, #6
 80007ce:	81fb      	strh	r3, [r7, #14]
			break;
 80007d0:	e09d      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;	// turn off row 1
 80007d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <keyboard_handler+0x29c>)
 80007de:	2208      	movs	r2, #8
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin;  // turn on row 3
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <keyboard_handler+0x29c>)
 80007e4:	2220      	movs	r2, #32
 80007e6:	619a      	str	r2, [r3, #24]
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;	// turn off row 4
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <keyboard_handler+0x29c>)
 80007ea:	2210      	movs	r2, #16
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin)
 80007ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <keyboard_handler+0x266>
		{
			key_pressed = 0x09; // if column 3 is still high -> column 3 + row 3 = key 9
 80007fc:	2309      	movs	r3, #9
 80007fe:	81fb      	strh	r3, [r7, #14]
			break;
 8000800:	e085      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin;	// turn off row 1
 8000802:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;	// turn off row 2
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <keyboard_handler+0x29c>)
 800080e:	2208      	movs	r2, #8
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <keyboard_handler+0x29c>)
 8000814:	2220      	movs	r2, #32
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin;	// turn on row 4
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <keyboard_handler+0x29c>)
 800081a:	2210      	movs	r2, #16
 800081c:	619a      	str	r2, [r3, #24]
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin)
 800081e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000828:	2b00      	cmp	r3, #0
 800082a:	d06d      	beq.n	8000908 <keyboard_handler+0x36c>
		{
			key_pressed = 0x10; // if column 3 is still high -> column 3 + row 4 = key #
 800082c:	2310      	movs	r3, #16
 800082e:	81fb      	strh	r3, [r7, #14]
			break;
 8000830:	e06d      	b.n	800090e <keyboard_handler+0x372>
 8000832:	bf00      	nop
 8000834:	200000a4 	.word	0x200000a4
 8000838:	48000400 	.word	0x48000400
		}
		break;

	case COLUMN_4_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 800083c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000844:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <keyboard_handler+0x37c>)
 8000848:	2208      	movs	r2, #8
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <keyboard_handler+0x37c>)
 800084e:	2220      	movs	r2, #32
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <keyboard_handler+0x37c>)
 8000854:	2210      	movs	r2, #16
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin)
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <keyboard_handler+0x380>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <keyboard_handler+0x2ce>
		{
			key_pressed = 0x0A; // if column 4 is still high -> column 4 + row 1 = key A
 8000864:	230a      	movs	r3, #10
 8000866:	81fb      	strh	r3, [r7, #14]
			break;
 8000868:	e051      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 800086a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800086e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; // turn on row 2
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <keyboard_handler+0x37c>)
 8000876:	2208      	movs	r2, #8
 8000878:	619a      	str	r2, [r3, #24]
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <keyboard_handler+0x37c>)
 800087c:	2220      	movs	r2, #32
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <keyboard_handler+0x37c>)
 8000882:	2210      	movs	r2, #16
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin)
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <keyboard_handler+0x380>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <keyboard_handler+0x2fc>
		{
			key_pressed = 0x0B; // if column 4 is still high -> column 4 + row 2 = key B
 8000892:	230b      	movs	r3, #11
 8000894:	81fb      	strh	r3, [r7, #14]
			break;
 8000896:	e03a      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800089c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; // turn on row 2
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <keyboard_handler+0x37c>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin;  // turn off row 3
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <keyboard_handler+0x37c>)
 80008aa:	2220      	movs	r2, #32
 80008ac:	619a      	str	r2, [r3, #24]
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <keyboard_handler+0x37c>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin)
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <keyboard_handler+0x380>)
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <keyboard_handler+0x32a>
		{
			key_pressed = 0x0C; // if column 4 is still high -> column 4 + row 3 = key C
 80008c0:	230c      	movs	r3, #12
 80008c2:	81fb      	strh	r3, [r7, #14]
			break;
 80008c4:	e023      	b.n	800090e <keyboard_handler+0x372>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80008c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BRR = ROW_2_Pin; // turn on row 2
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <keyboard_handler+0x37c>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <keyboard_handler+0x37c>)
 80008d8:	2220      	movs	r2, #32
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin;	// turn on row 4
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <keyboard_handler+0x37c>)
 80008de:	2210      	movs	r2, #16
 80008e0:	619a      	str	r2, [r3, #24]
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin)
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <keyboard_handler+0x380>)
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00e      	beq.n	800090c <keyboard_handler+0x370>
		{
			key_pressed = 0x0D; // if column 4 is still high -> column 4 + row 4 = key D
 80008ee:	230d      	movs	r3, #13
 80008f0:	81fb      	strh	r3, [r7, #14]
			break;
 80008f2:	e00c      	b.n	800090e <keyboard_handler+0x372>
		}
		break;

		default:
			/* This should not be reached */
			printf("Unknown column: %x\r\n", column_to_evaluate);
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <keyboard_handler+0x384>)
 80008fa:	f004 fd8d 	bl	8005418 <iprintf>
		break;
 80008fe:	e006      	b.n	800090e <keyboard_handler+0x372>
		break;
 8000900:	bf00      	nop
 8000902:	e004      	b.n	800090e <keyboard_handler+0x372>
		break;
 8000904:	bf00      	nop
 8000906:	e002      	b.n	800090e <keyboard_handler+0x372>
		break;
 8000908:	bf00      	nop
 800090a:	e000      	b.n	800090e <keyboard_handler+0x372>
		break;
 800090c:	bf00      	nop
	}

	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 800090e:	89fb      	ldrh	r3, [r7, #14]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	48000400 	.word	0x48000400
 800091c:	48000800 	.word	0x48000800
 8000920:	080064f4 	.word	0x080064f4

08000924 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	b29a      	uxth	r2, r3
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <_write+0x28>)
 800093c:	f003 f9c4 	bl	8003cc8 <HAL_UART_Transmit>
  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000fc 	.word	0x200000fc

08000950 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]

	key_event = GPIO_Pin ;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_GPIO_EXTI_Callback+0x1c>)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	8013      	strh	r3, [r2, #0]

}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000000 	.word	0x20000000

08000970 <reset_all>:
/*
 * @brief Resetting values ​​and buffer, ready for a new event
 * @retval None
 */
void reset_all(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	ring_buffer_reset(&ring_buffer_keyboard);
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <reset_all+0x2c>)
 8000976:	f000 fb75 	bl	8001064 <ring_buffer_reset>
	memset(rx_buffer, 0, sizeof(rx_buffer)); // Resetting rx_buffer to 0 using memset
 800097a:	2205      	movs	r2, #5
 800097c:	2100      	movs	r1, #0
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <reset_all+0x30>)
 8000980:	f004 fdd3 	bl	800552a <memset>
	rx_data = 0;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <reset_all+0x34>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	key_event = 0xFF;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <reset_all+0x38>)
 800098c:	22ff      	movs	r2, #255	; 0xff
 800098e:	801a      	strh	r2, [r3, #0]
	key_pressed = 0xFf;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <reset_all+0x3c>)
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	801a      	strh	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000018c 	.word	0x2000018c
 80009a0:	20000184 	.word	0x20000184
 80009a4:	20000198 	.word	0x20000198
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000002 	.word	0x20000002

080009b0 <display_init>:
/*
 * @brief Starting screen
 * @retval None
 */
void display_init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80009b4:	f004 fa6c 	bl	8004e90 <ssd1306_Init>
	ssd1306_Fill(Black); // Color screen
 80009b8:	2000      	movs	r0, #0
 80009ba:	f004 fad3 	bl	8004f64 <ssd1306_Fill>
	ssd1306_SetCursor(20, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	2014      	movs	r0, #20
 80009c2:	f004 fc1d 	bl	8005200 <ssd1306_SetCursor>
	ssd1306_WriteString("Welcome", Font_7x10, White); // Text, size, color text
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <display_init+0x6c>)
 80009c8:	2301      	movs	r3, #1
 80009ca:	ca06      	ldmia	r2, {r1, r2}
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <display_init+0x70>)
 80009ce:	f004 fbf1 	bl	80051b4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 80009d2:	210a      	movs	r1, #10
 80009d4:	2000      	movs	r0, #0
 80009d6:	f004 fc13 	bl	8005200 <ssd1306_SetCursor>
	ssd1306_WriteString("Enter your password", Font_7x10, White);
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <display_init+0x6c>)
 80009dc:	2301      	movs	r3, #1
 80009de:	ca06      	ldmia	r2, {r1, r2}
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <display_init+0x74>)
 80009e2:	f004 fbe7 	bl	80051b4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80009e6:	f004 fae1 	bl	8004fac <ssd1306_UpdateScreen>
	ssd1306_SetCursor(20, 40);
 80009ea:	2128      	movs	r1, #40	; 0x28
 80009ec:	2014      	movs	r0, #20
 80009ee:	f004 fc07 	bl	8005200 <ssd1306_SetCursor>
	ssd1306_WriteString("A = Accept", Font_7x10, White);
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <display_init+0x6c>)
 80009f4:	2301      	movs	r3, #1
 80009f6:	ca06      	ldmia	r2, {r1, r2}
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <display_init+0x78>)
 80009fa:	f004 fbdb 	bl	80051b4 <ssd1306_WriteString>
	ssd1306_SetCursor(20, 50);
 80009fe:	2132      	movs	r1, #50	; 0x32
 8000a00:	2014      	movs	r0, #20
 8000a02:	f004 fbfd 	bl	8005200 <ssd1306_SetCursor>
	ssd1306_WriteString("B = Reset", Font_7x10, White);
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <display_init+0x6c>)
 8000a08:	2301      	movs	r3, #1
 8000a0a:	ca06      	ldmia	r2, {r1, r2}
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <display_init+0x7c>)
 8000a0e:	f004 fbd1 	bl	80051b4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a12:	f004 facb 	bl	8004fac <ssd1306_UpdateScreen>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000014 	.word	0x20000014
 8000a20:	0800650c 	.word	0x0800650c
 8000a24:	08006514 	.word	0x08006514
 8000a28:	08006528 	.word	0x08006528
 8000a2c:	08006534 	.word	0x08006534

08000a30 <main>:

int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000a36:	f000 fd23 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f913 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 f9d3 	bl	8000de8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a42:	f000 f9a1 	bl	8000d88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a46:	f000 f95f 	bl	8000d08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ring_buffer_init(&ring_buffer_keyboard, rx_buffer, 5); // buffer initialization
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4977      	ldr	r1, [pc, #476]	; (8000c2c <main+0x1fc>)
 8000a4e:	4878      	ldr	r0, [pc, #480]	; (8000c30 <main+0x200>)
 8000a50:	f000 fa87 	bl	8000f62 <ring_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  keyboard_init(); // Initialize the keypad functionality
 8000a54:	f7ff fd8a 	bl	800056c <keyboard_init>
  display_init(); // Starting screen
 8000a58:	f7ff ffaa 	bl	80009b0 <display_init>


  while (1)
  {

	if (key_event != 0xFF)// check if there is a event from the EXTi callback
 8000a5c:	4b75      	ldr	r3, [pc, #468]	; (8000c34 <main+0x204>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	2bff      	cmp	r3, #255	; 0xff
 8000a62:	d0fb      	beq.n	8000a5c <main+0x2c>
	{

		uint8_t key_pressed = keyboard_handler(key_event); // call the keypad handler
 8000a64:	4b73      	ldr	r3, [pc, #460]	; (8000c34 <main+0x204>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fd97 	bl	800059c <keyboard_handler>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]
		printf("Key pressed: %x\r\n", key_pressed);  // print the key pressed
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4870      	ldr	r0, [pc, #448]	; (8000c38 <main+0x208>)
 8000a78:	f004 fcce 	bl	8005418 <iprintf>
		rx_data = key_pressed;
 8000a7c:	4a6f      	ldr	r2, [pc, #444]	; (8000c3c <main+0x20c>)
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	7013      	strb	r3, [r2, #0]

		ring_buffer_put(&ring_buffer_keyboard, rx_data);/*This function adds a data in the ring buffer*/
 8000a82:	4b6e      	ldr	r3, [pc, #440]	; (8000c3c <main+0x20c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4869      	ldr	r0, [pc, #420]	; (8000c30 <main+0x200>)
 8000a8a:	f000 fa86 	bl	8000f9a <ring_buffer_put>

		if(ring_buffer_size(&ring_buffer_keyboard)==5)
 8000a8e:	4868      	ldr	r0, [pc, #416]	; (8000c30 <main+0x200>)
 8000a90:	f000 fac0 	bl	8001014 <ring_buffer_size>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d12d      	bne.n	8000af6 <main+0xc6>
		{
			/* print the key on the screen */
			char buffer[10]; // Buffer to store the number text string
			snprintf(buffer, sizeof(buffer), "%u", rx_data); // Convert hexadecimal number to a string in decimal format
 8000a9a:	4b68      	ldr	r3, [pc, #416]	; (8000c3c <main+0x20c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	1d38      	adds	r0, r7, #4
 8000aa0:	4a67      	ldr	r2, [pc, #412]	; (8000c40 <main+0x210>)
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	f004 fcca 	bl	800543c <sniprintf>
			ssd1306_SetCursor(m , 20);
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <main+0x214>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2114      	movs	r1, #20
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fba5 	bl	8005200 <ssd1306_SetCursor>
			ssd1306_WriteString(buffer, Font_11x18, White);
 8000ab6:	4a64      	ldr	r2, [pc, #400]	; (8000c48 <main+0x218>)
 8000ab8:	1d38      	adds	r0, r7, #4
 8000aba:	2301      	movs	r3, #1
 8000abc:	ca06      	ldmia	r2, {r1, r2}
 8000abe:	f004 fb79 	bl	80051b4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000ac2:	f004 fa73 	bl	8004fac <ssd1306_UpdateScreen>
			HAL_Delay(500);
 8000ac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aca:	f000 fd55 	bl	8001578 <HAL_Delay>
			ssd1306_SetCursor(m , 20);
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <main+0x214>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2114      	movs	r1, #20
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 fb92 	bl	8005200 <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_11x18, White);
 8000adc:	4a5a      	ldr	r2, [pc, #360]	; (8000c48 <main+0x218>)
 8000ade:	2301      	movs	r3, #1
 8000ae0:	ca06      	ldmia	r2, {r1, r2}
 8000ae2:	485a      	ldr	r0, [pc, #360]	; (8000c4c <main+0x21c>)
 8000ae4:	f004 fb66 	bl	80051b4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000ae8:	f004 fa60 	bl	8004fac <ssd1306_UpdateScreen>
			m += 10;
 8000aec:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <main+0x214>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	330a      	adds	r3, #10
 8000af2:	4a54      	ldr	r2, [pc, #336]	; (8000c44 <main+0x214>)
 8000af4:	6013      	str	r3, [r2, #0]
		}

		HAL_Delay(600);
 8000af6:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000afa:	f000 fd3d 	bl	8001578 <HAL_Delay>
		key_event = 0xFF; // clean the event
 8000afe:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <main+0x204>)
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	801a      	strh	r2, [r3, #0]
		keyboard_init();
 8000b04:	f7ff fd32 	bl	800056c <keyboard_init>

		if(rx_data == 0x0B) // Press the "B" key to restart the sequence
 8000b08:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <main+0x20c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b0b      	cmp	r3, #11
 8000b0e:	d107      	bne.n	8000b20 <main+0xf0>
		{
			m = 30; // initializing the the index where the key starts
 8000b10:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <main+0x214>)
 8000b12:	221e      	movs	r2, #30
 8000b14:	601a      	str	r2, [r3, #0]
			reset_all();
 8000b16:	f7ff ff2b 	bl	8000970 <reset_all>
			display_init();
 8000b1a:	f7ff ff49 	bl	80009b0 <display_init>
 8000b1e:	e080      	b.n	8000c22 <main+0x1f2>
		}
		else if (rx_buffer[4] == 0x0A) // Press the "A" key to continue
 8000b20:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <main+0x1fc>)
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	2b0a      	cmp	r3, #10
 8000b26:	d155      	bne.n	8000bd4 <main+0x1a4>
			{
				m = 30;
 8000b28:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <main+0x214>)
 8000b2a:	221e      	movs	r2, #30
 8000b2c:	601a      	str	r2, [r3, #0]
				int numero = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 4; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	e00e      	b.n	8000b56 <main+0x126>
				{
					numero = numero * 10 + (rx_buffer[i]-0); // hex to dec
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	4a39      	ldr	r2, [pc, #228]	; (8000c2c <main+0x1fc>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 4; i++)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	3301      	adds	r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dded      	ble.n	8000b38 <main+0x108>
				}
				printf("La clave es: %u\r\n", numero);
 8000b5c:	6979      	ldr	r1, [r7, #20]
 8000b5e:	483c      	ldr	r0, [pc, #240]	; (8000c50 <main+0x220>)
 8000b60:	f004 fc5a 	bl	8005418 <iprintf>

				if (numero == 1998) // year of birth
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d116      	bne.n	8000b9c <main+0x16c>
				{
					ssd1306_Init();
 8000b6e:	f004 f98f 	bl	8004e90 <ssd1306_Init>
					ssd1306_SetCursor(20, 20);
 8000b72:	2114      	movs	r1, #20
 8000b74:	2014      	movs	r0, #20
 8000b76:	f004 fb43 	bl	8005200 <ssd1306_SetCursor>
					ssd1306_WriteString("PASS", Font_16x26, White);
 8000b7a:	4a36      	ldr	r2, [pc, #216]	; (8000c54 <main+0x224>)
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	ca06      	ldmia	r2, {r1, r2}
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <main+0x228>)
 8000b82:	f004 fb17 	bl	80051b4 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000b86:	f004 fa11 	bl	8004fac <ssd1306_UpdateScreen>
					HAL_Delay(800);
 8000b8a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b8e:	f000 fcf3 	bl	8001578 <HAL_Delay>
					reset_all();
 8000b92:	f7ff feed 	bl	8000970 <reset_all>
					display_init();
 8000b96:	f7ff ff0b 	bl	80009b0 <display_init>
 8000b9a:	e042      	b.n	8000c22 <main+0x1f2>
				}
				else if (numero != 1998) // year of birth
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d03d      	beq.n	8000c22 <main+0x1f2>
				{
					ssd1306_Init();
 8000ba6:	f004 f973 	bl	8004e90 <ssd1306_Init>
					ssd1306_SetCursor(20, 20);
 8000baa:	2114      	movs	r1, #20
 8000bac:	2014      	movs	r0, #20
 8000bae:	f004 fb27 	bl	8005200 <ssd1306_SetCursor>
					ssd1306_WriteString("FAIL", Font_16x26, White);
 8000bb2:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <main+0x224>)
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	ca06      	ldmia	r2, {r1, r2}
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <main+0x22c>)
 8000bba:	f004 fafb 	bl	80051b4 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000bbe:	f004 f9f5 	bl	8004fac <ssd1306_UpdateScreen>
					HAL_Delay(800);
 8000bc2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000bc6:	f000 fcd7 	bl	8001578 <HAL_Delay>
					reset_all();
 8000bca:	f7ff fed1 	bl	8000970 <reset_all>
					display_init();
 8000bce:	f7ff feef 	bl	80009b0 <display_init>
 8000bd2:	e026      	b.n	8000c22 <main+0x1f2>
				}
			}
		//If any key "A" or "b" is pressed after entering the password, an error occurs
		else if ((rx_buffer[4] != 0x0A || rx_buffer[4] != 0x0B ) && ring_buffer_size(&ring_buffer_keyboard)==5)
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <main+0x1fc>)
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	2b0a      	cmp	r3, #10
 8000bda:	d103      	bne.n	8000be4 <main+0x1b4>
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <main+0x1fc>)
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	2b0b      	cmp	r3, #11
 8000be2:	d01e      	beq.n	8000c22 <main+0x1f2>
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <main+0x200>)
 8000be6:	f000 fa15 	bl	8001014 <ring_buffer_size>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d118      	bne.n	8000c22 <main+0x1f2>
		{
			m = 30;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <main+0x214>)
 8000bf2:	221e      	movs	r2, #30
 8000bf4:	601a      	str	r2, [r3, #0]
			ssd1306_Init();
 8000bf6:	f004 f94b 	bl	8004e90 <ssd1306_Init>
			ssd1306_SetCursor(20, 20);
 8000bfa:	2114      	movs	r1, #20
 8000bfc:	2014      	movs	r0, #20
 8000bfe:	f004 faff 	bl	8005200 <ssd1306_SetCursor>
			ssd1306_WriteString("ERROR", Font_16x26, White);
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <main+0x224>)
 8000c04:	2301      	movs	r3, #1
 8000c06:	ca06      	ldmia	r2, {r1, r2}
 8000c08:	4815      	ldr	r0, [pc, #84]	; (8000c60 <main+0x230>)
 8000c0a:	f004 fad3 	bl	80051b4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000c0e:	f004 f9cd 	bl	8004fac <ssd1306_UpdateScreen>
			HAL_Delay(800);
 8000c12:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c16:	f000 fcaf 	bl	8001578 <HAL_Delay>
			reset_all();
 8000c1a:	f7ff fea9 	bl	8000970 <reset_all>
			display_init();
 8000c1e:	f7ff fec7 	bl	80009b0 <display_init>
		}

		rx_buffer[4] = 0; // cleaning position 5
 8000c22:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <main+0x1fc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	711a      	strb	r2, [r3, #4]
	if (key_event != 0xFF)// check if there is a event from the EXTi callback
 8000c28:	e718      	b.n	8000a5c <main+0x2c>
 8000c2a:	bf00      	nop
 8000c2c:	20000184 	.word	0x20000184
 8000c30:	2000018c 	.word	0x2000018c
 8000c34:	20000000 	.word	0x20000000
 8000c38:	08006540 	.word	0x08006540
 8000c3c:	20000198 	.word	0x20000198
 8000c40:	08006554 	.word	0x08006554
 8000c44:	20000004 	.word	0x20000004
 8000c48:	2000001c 	.word	0x2000001c
 8000c4c:	08006558 	.word	0x08006558
 8000c50:	0800655c 	.word	0x0800655c
 8000c54:	20000024 	.word	0x20000024
 8000c58:	08006570 	.word	0x08006570
 8000c5c:	08006578 	.word	0x08006578
 8000c60:	08006580 	.word	0x08006580

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b096      	sub	sp, #88	; 0x58
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fc59 	bl	800552a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8a:	f001 fcbd 	bl	8002608 <HAL_PWREx_ControlVoltageScaling>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c94:	f000 f960 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fcf4 	bl	80026b4 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cd2:	f000 f941 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2104      	movs	r1, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 f8bc 	bl	8002e6c <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cfa:	f000 f92d 	bl	8000f58 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	; 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_I2C1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <MX_I2C1_Init+0x7c>)
 8000d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d44:	f000 ffa6 	bl	8001c94 <HAL_I2C_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d4e:	f000 f903 	bl	8000f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d56:	f001 fbb1 	bl	80024bc <HAL_I2CEx_ConfigAnalogFilter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d60:	f000 f8fa 	bl	8000f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d68:	f001 fbf3 	bl	8002552 <HAL_I2CEx_ConfigDigitalFilter>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 f8f1 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a8 	.word	0x200000a8
 8000d80:	40005400 	.word	0x40005400
 8000d84:	10909cec 	.word	0x10909cec

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_USART2_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dcc:	f002 ff2e 	bl	8003c2c <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 f8bf 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000fc 	.word	0x200000fc
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b50      	ldr	r3, [pc, #320]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	4b4d      	ldr	r3, [pc, #308]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b4a      	ldr	r3, [pc, #296]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a40      	ldr	r2, [pc, #256]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_GPIO_Init+0x164>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f000 fee4 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2138      	movs	r1, #56	; 0x38
 8000e70:	4837      	ldr	r0, [pc, #220]	; (8000f50 <MX_GPIO_Init+0x168>)
 8000e72:	f000 fedf 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4831      	ldr	r0, [pc, #196]	; (8000f54 <MX_GPIO_Init+0x16c>)
 8000e8e:	f000 fd27 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000e92:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f000 fd17 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4821      	ldr	r0, [pc, #132]	; (8000f50 <MX_GPIO_Init+0x168>)
 8000eca:	f000 fd09 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_GPIO_Init+0x16c>)
 8000ee4:	f000 fcfc 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 8000ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 fced 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000f06:	2338      	movs	r3, #56	; 0x38
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_GPIO_Init+0x168>)
 8000f1e:	f000 fcdf 	bl	80018e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2017      	movs	r0, #23
 8000f28:	f000 fc25 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f2c:	2017      	movs	r0, #23
 8000f2e:	f000 fc3e 	bl	80017ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2028      	movs	r0, #40	; 0x28
 8000f38:	f000 fc1d 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f3c:	2028      	movs	r0, #40	; 0x28
 8000f3e:	f000 fc36 	bl	80017ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000800 	.word	0x48000800

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>

08000f62 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	80fb      	strh	r3, [r7, #6]
	/*parameter initialization*/
	ring_buffer->buffer = buffer;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	811a      	strh	r2, [r3, #8]

	ring_buffer->head  = 0;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	729a      	strb	r2, [r3, #10]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <ring_buffer_put>:
/*This function adds a data in the ring buffer*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data; // put the data where the head is
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	8892      	ldrh	r2, [r2, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	701a      	strb	r2, [r3, #0]

	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity; // When the counter reaches the end of memory, the counter is reset to write data again
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	889b      	ldrh	r3, [r3, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	8912      	ldrh	r2, [r2, #8]
 8000fbe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fc2:	fb01 f202 	mul.w	r2, r1, r2
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	809a      	strh	r2, [r3, #4]
		ring_buffer->head;
	}*/

	//If the head has already reached the end of the data, it returns and restarts to write the data again.
	//a buffer is full when the head reaches the tail
	if(ring_buffer->is_full != 0)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7a9b      	ldrb	r3, [r3, #10]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00c      	beq.n	8000ff0 <ring_buffer_put+0x56>
	{
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity; //If the buffer is still not full, the head moves one more position.
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	88db      	ldrh	r3, [r3, #6]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	8912      	ldrh	r2, [r2, #8]
 8000fe0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fe4:	fb01 f202 	mul.w	r2, r1, r2
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	80da      	strh	r2, [r3, #6]
	}

	if(ring_buffer->head == ring_buffer->tail)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	889a      	ldrh	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	88db      	ldrh	r3, [r3, #6]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d104      	bne.n	8001006 <ring_buffer_put+0x6c>
	{
		ring_buffer->is_full = 1;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	729a      	strb	r2, [r3, #10]
		return 0;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <ring_buffer_put+0x6e>
	}
	return 1;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <ring_buffer_size>:
	}
	return 0;
}
/*This function return the ring buffer size*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	81fb      	strh	r3, [r7, #14]
	if((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a9b      	ldrb	r3, [r3, #10]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10c      	bne.n	8001042 <ring_buffer_size+0x2e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	88da      	ldrh	r2, [r3, #6]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	889b      	ldrh	r3, [r3, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	d806      	bhi.n	8001042 <ring_buffer_size+0x2e>
	{
		size = ring_buffer->head - ring_buffer->tail;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	889a      	ldrh	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	88db      	ldrh	r3, [r3, #6]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	81fb      	strh	r3, [r7, #14]
 8001040:	e009      	b.n	8001056 <ring_buffer_size+0x42>
	}
	else
	{
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	889a      	ldrh	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	8919      	ldrh	r1, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	88db      	ldrh	r3, [r3, #6]
 800104e:	1acb      	subs	r3, r1, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 8001056:	89fb      	ldrh	r3, [r7, #14]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <ring_buffer_reset>:
{
	return (ring_buffer->is_full=0);
}

void ring_buffer_reset(ring_buffer_t *ring_buffer)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	ring_buffer->head = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full =0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	729a      	strb	r2, [r3, #10]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x44>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x44>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6613      	str	r3, [r2, #96]	; 0x60
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x44>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x44>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x44>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x44>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	; 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 fa18 	bl	800552a <memset>
  if(hi2c->Instance==I2C1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_I2C_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f002 f8cf 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff ff1c 	bl	8000f58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115c:	4619      	mov	r1, r3
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_I2C_MspInit+0xb8>)
 8001160:	f000 fbbe 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	; 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0ac      	sub	sp, #176	; 0xb0
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2288      	movs	r2, #136	; 0x88
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f9ba 	bl	800552a <memset>
  if(huart->Instance==USART2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a25      	ldr	r2, [pc, #148]	; (8001250 <HAL_UART_MspInit+0xc0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d143      	bne.n	8001248 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 f871 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d8:	f7ff febe 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_UART_MspInit+0xc4>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <HAL_UART_MspInit+0xc4>)
 80011e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e6:	6593      	str	r3, [r2, #88]	; 0x58
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_UART_MspInit+0xc4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_UART_MspInit+0xc4>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_UART_MspInit+0xc4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_UART_MspInit+0xc4>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800120c:	230c      	movs	r3, #12
 800120e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001224:	2307      	movs	r3, #7
 8001226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f000 fb54 	bl	80018e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2026      	movs	r0, #38	; 0x26
 800123e:	f000 fa9a 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001242:	2026      	movs	r0, #38	; 0x26
 8001244:	f000 fab3 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	37b0      	adds	r7, #176	; 0xb0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40004400 	.word	0x40004400
 8001254:	40021000 	.word	0x40021000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f948 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 80012b0:	2080      	movs	r0, #128	; 0x80
 80012b2:	f000 fcd7 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 80012b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012ba:	f000 fcd3 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 80012be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012c2:	f000 fccf 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <USART2_IRQHandler+0x10>)
 80012d2:	f002 fd83 	bl	8003ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000fc 	.word	0x200000fc

080012e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 80012e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012e8:	f000 fcbc 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f0:	f000 fcb8 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
  }

  return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	605a      	str	r2, [r3, #4]
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f004 f8fc 	bl	80055c8 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20018000 	.word	0x20018000
 80013fc:	00000400 	.word	0x00000400
 8001400:	2000019c 	.word	0x2000019c
 8001404:	200006f8 	.word	0x200006f8

08001408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff ffea 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f004 f8bb 	bl	80055d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145e:	f7ff fae7 	bl	8000a30 <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001464:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001470:	08008e28 	.word	0x08008e28
  ldr r2, =_sbss
 8001474:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001478:	200006f8 	.word	0x200006f8

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_Init+0x3c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x3c>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	2003      	movs	r0, #3
 8001498:	f000 f962 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f80f 	bl	80014c0 <HAL_InitTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	e001      	b.n	80014b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ae:	f7ff fded 	bl	800108c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_InitTick+0x6c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_InitTick+0x70>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_InitTick+0x6c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f96d 	bl	80017ca <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d809      	bhi.n	8001510 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f937 	bl	8001776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_InitTick+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e007      	b.n	8001520 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e004      	b.n	8001520 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e001      	b.n	8001520 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000010 	.word	0x20000010
 8001530:	20000008 	.word	0x20000008
 8001534:	2000000c 	.word	0x2000000c

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000010 	.word	0x20000010
 800155c:	200001a0 	.word	0x200001a0

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200001a0 	.word	0x200001a0

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000010 	.word	0x20000010

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d008      	beq.n	800180c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2204      	movs	r2, #4
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e022      	b.n	8001852 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020e 	bic.w	r2, r2, #14
 800181a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f003 021c 	and.w	r2, r3, #28
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d005      	beq.n	8001882 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2204      	movs	r2, #4
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e029      	b.n	80018d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020e 	bic.w	r2, r2, #14
 8001890:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f003 021c 	and.w	r2, r3, #28
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f202 	lsl.w	r2, r1, r2
 80018b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
    }
  }
  return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	e17f      	b.n	8001bf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8171 	beq.w	8001bea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <HAL_GPIO_Init+0x40>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d118      	bne.n	80019c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80ac 	beq.w	8001bea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a5e      	ldr	r2, [pc, #376]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b5c      	ldr	r3, [pc, #368]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aaa:	4a5a      	ldr	r2, [pc, #360]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x242>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x338>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x33c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_GPIO_Init+0x340>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x344>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x348>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x22a>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00c      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00a      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b22:	2300      	movs	r3, #0
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b34:	4937      	ldr	r1, [pc, #220]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b66:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b90:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be4:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_GPIO_Init+0x350>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae78 	bne.w	80018f0 <HAL_GPIO_Init+0x10>
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	48001000 	.word	0x48001000
 8001c28:	48001400 	.word	0x48001400
 8001c2c:	48001800 	.word	0x48001800
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fe64 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e08d      	b.n	8001dc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fa0a 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d108      	bne.n	8001d36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	e007      	b.n	8001d46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69d9      	ldr	r1, [r3, #28]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	460b      	mov	r3, r1
 8001de0:	813b      	strh	r3, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	f040 80f9 	bne.w	8001fe6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_I2C_Mem_Write+0x34>
 8001dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0ed      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Mem_Write+0x4e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0e6      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e22:	f7ff fb9d 	bl	8001560 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2319      	movs	r3, #25
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f955 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d1      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2221      	movs	r2, #33	; 0x21
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e6c:	88f8      	ldrh	r0, [r7, #6]
 8001e6e:	893a      	ldrh	r2, [r7, #8]
 8001e70:	8979      	ldrh	r1, [r7, #10]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f8b9 	bl	8001ff4 <I2C_RequestMemoryWrite>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0a9      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d90e      	bls.n	8001ebc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	22ff      	movs	r2, #255	; 0xff
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 facf 	bl	8002458 <I2C_TransferConfig>
 8001eba:	e00f      	b.n	8001edc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	8979      	ldrh	r1, [r7, #10]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fabe 	bl	8002458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f94e 	bl	8002182 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07b      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d034      	beq.n	8001f94 <HAL_I2C_Mem_Write+0x1c8>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d130      	bne.n	8001f94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f8d1 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e04d      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d90e      	bls.n	8001f74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	; 0xff
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fa73 	bl	8002458 <I2C_TransferConfig>
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa62 	bl	8002458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d19e      	bne.n	8001edc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f934 	bl	8002210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01a      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_I2C_Mem_Write+0x224>)
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fe00e800 	.word	0xfe00e800

08001ff4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	460b      	mov	r3, r1
 8002008:	813b      	strh	r3, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <I2C_RequestMemoryWrite+0xa4>)
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fa1b 	bl	8002458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	69b9      	ldr	r1, [r7, #24]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f8ab 	bl	8002182 <I2C_WaitOnTXISFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e02c      	b.n	8002090 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800203c:	893b      	ldrh	r3, [r7, #8]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
 8002046:	e015      	b.n	8002074 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002048:	893b      	ldrh	r3, [r7, #8]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f891 	bl	8002182 <I2C_WaitOnTXISFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e012      	b.n	8002090 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206a:	893b      	ldrh	r3, [r7, #8]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2200      	movs	r2, #0
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f830 	bl	80020e4 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	80002000 	.word	0x80002000

0800209c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d103      	bne.n	80020ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d007      	beq.n	80020d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	619a      	str	r2, [r3, #24]
  }
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f4:	e031      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d02d      	beq.n	800215a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7ff fa2f 	bl	8001560 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d122      	bne.n	800215a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	429a      	cmp	r2, r3
 8002130:	d113      	bne.n	800215a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4013      	ands	r3, r2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	429a      	cmp	r2, r3
 8002176:	d0be      	beq.n	80020f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800218e:	e033      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f87f 	bl	8002298 <I2C_IsErrorOccurred>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e031      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d025      	beq.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7ff f9d8 	bl	8001560 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11a      	bne.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d013      	beq.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d1c4      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800221c:	e02f      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f838 	bl	8002298 <I2C_IsErrorOccurred>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e02d      	b.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7ff f995 	bl	8001560 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11a      	bne.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b20      	cmp	r3, #32
 8002254:	d013      	beq.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b20      	cmp	r3, #32
 800228a:	d1c8      	bne.n	800221e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d068      	beq.n	8002396 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2210      	movs	r2, #16
 80022ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022cc:	e049      	b.n	8002362 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d045      	beq.n	8002362 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7ff f943 	bl	8001560 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_IsErrorOccurred+0x54>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d13a      	bne.n	8002362 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	d121      	bne.n	8002354 <I2C_IsErrorOccurred+0xbc>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002316:	d01d      	beq.n	8002354 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b20      	cmp	r3, #32
 800231c:	d01a      	beq.n	8002354 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800232c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800232e:	f7ff f917 	bl	8001560 <HAL_GetTick>
 8002332:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	e00e      	b.n	8002354 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002336:	f7ff f913 	bl	8001560 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b19      	cmp	r3, #25
 8002342:	d907      	bls.n	8002354 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002352:	e006      	b.n	8002362 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d1e9      	bne.n	8002336 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b20      	cmp	r3, #32
 800236e:	d003      	beq.n	8002378 <I2C_IsErrorOccurred+0xe0>
 8002370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0aa      	beq.n	80022ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2220      	movs	r2, #32
 8002386:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01c      	beq.n	8002446 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff fe45 	bl	800209c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <I2C_IsErrorOccurred+0x1bc>)
 800241e:	400b      	ands	r3, r1
 8002420:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800244a:	4618      	mov	r0, r3
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	fe00e800 	.word	0xfe00e800

08002458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	817b      	strh	r3, [r7, #10]
 8002466:	4613      	mov	r3, r2
 8002468:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800246a:	897b      	ldrh	r3, [r7, #10]
 800246c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002478:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	4313      	orrs	r3, r2
 8002482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002486:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	0d5b      	lsrs	r3, r3, #21
 8002492:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <I2C_TransferConfig+0x60>)
 8002498:	430b      	orrs	r3, r1
 800249a:	43db      	mvns	r3, r3
 800249c:	ea02 0103 	and.w	r1, r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	03ff63ff 	.word	0x03ff63ff

080024bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d138      	bne.n	8002544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024dc:	2302      	movs	r3, #2
 80024de:	e032      	b.n	8002546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b20      	cmp	r3, #32
 8002566:	d139      	bne.n	80025dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002572:	2302      	movs	r3, #2
 8002574:	e033      	b.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2224      	movs	r2, #36	; 0x24
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_PWREx_GetVoltageRange+0x18>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000

08002608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002616:	d130      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002624:	d038      	beq.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2232      	movs	r2, #50	; 0x32
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264c:	e002      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002660:	d102      	bne.n	8002668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f2      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d110      	bne.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e00f      	b.n	800269a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d007      	beq.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40007000 	.word	0x40007000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e3ca      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	4b97      	ldr	r3, [pc, #604]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d0:	4b94      	ldr	r3, [pc, #592]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80e4 	beq.w	80028b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_RCC_OscConfig+0x4a>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f040 808b 	bne.w	800280c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 8087 	bne.w	800280c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fe:	4b89      	ldr	r3, [pc, #548]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x62>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e3a2      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	4b82      	ldr	r3, [pc, #520]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_RCC_OscConfig+0x7c>
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272e:	e005      	b.n	800273c <HAL_RCC_OscConfig+0x88>
 8002730:	4b7c      	ldr	r3, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800273c:	4293      	cmp	r3, r2
 800273e:	d223      	bcs.n	8002788 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fd55 	bl	80031f4 <RCC_SetFlashLatencyFromMSIRange>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e383      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002754:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a72      	ldr	r2, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b70      	ldr	r3, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	496d      	ldr	r1, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	4968      	ldr	r1, [pc, #416]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e025      	b.n	80027d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800278e:	f043 0308 	orr.w	r3, r3, #8
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4960      	ldr	r1, [pc, #384]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a6:	4b5f      	ldr	r3, [pc, #380]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	495b      	ldr	r1, [pc, #364]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fd15 	bl	80031f4 <RCC_SetFlashLatencyFromMSIRange>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e343      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d4:	f000 fc4a 	bl	800306c <HAL_RCC_GetSysClockFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	4950      	ldr	r1, [pc, #320]	; (8002928 <HAL_RCC_OscConfig+0x274>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_RCC_OscConfig+0x278>)
 80027f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <HAL_RCC_OscConfig+0x27c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fe61 	bl	80014c0 <HAL_InitTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d052      	beq.n	80028ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	e327      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d032      	beq.n	800287a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002814:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a42      	ldr	r2, [pc, #264]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002820:	f7fe fe9e 	bl	8001560 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002828:	f7fe fe9a 	bl	8001560 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e310      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a36      	ldr	r2, [pc, #216]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4931      	ldr	r1, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	492c      	ldr	r1, [pc, #176]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e01a      	b.n	80028b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a29      	ldr	r2, [pc, #164]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002886:	f7fe fe6b 	bl	8001560 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288e:	f7fe fe67 	bl	8001560 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e2dd      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x1da>
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d074      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x21a>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d10e      	bne.n	80028e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d064      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d160      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e2ba      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_OscConfig+0x24a>
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e026      	b.n	800294c <HAL_RCC_OscConfig+0x298>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002906:	d115      	bne.n	8002934 <HAL_RCC_OscConfig+0x280>
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a05      	ldr	r2, [pc, #20]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800290e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a02      	ldr	r2, [pc, #8]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x298>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	08006588 	.word	0x08006588
 800292c:	20000008 	.word	0x20000008
 8002930:	2000000c 	.word	0x2000000c
 8002934:	4ba0      	ldr	r3, [pc, #640]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a9f      	ldr	r2, [pc, #636]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b9d      	ldr	r3, [pc, #628]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a9c      	ldr	r2, [pc, #624]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fe04 	bl	8001560 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fe00 	bl	8001560 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e276      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4b92      	ldr	r3, [pc, #584]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x2a8>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fdf0 	bl	8001560 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fdec 	bl	8001560 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e262      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x2d0>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d060      	beq.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x310>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d116      	bne.n	80029f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c4:	4b7c      	ldr	r3, [pc, #496]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e23f      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	4973      	ldr	r1, [pc, #460]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	e040      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d023      	beq.n	8002a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fa:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6e      	ldr	r2, [pc, #440]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe fdab 	bl	8001560 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fda7 	bl	8001560 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e21d      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a20:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b62      	ldr	r3, [pc, #392]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	495f      	ldr	r1, [pc, #380]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	e018      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5c      	ldr	r2, [pc, #368]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd87 	bl	8001560 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fd83 	bl	8001560 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1f9      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a68:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8e:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fd62 	bl	8001560 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fd5e 	bl	8001560 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1d4      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x3ec>
 8002ac0:	e01b      	b.n	8002afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fd45 	bl	8001560 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ada:	f7fe fd41 	bl	8001560 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1b7      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80a6 	beq.w	8002c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x508>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d118      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_OscConfig+0x508>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_RCC_OscConfig+0x508>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fd08 	bl	8001560 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fd04 	bl	8001560 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e17a      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCC_OscConfig+0x508>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4d8>
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8a:	e029      	b.n	8002be0 <HAL_RCC_OscConfig+0x52c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x50c>
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <HAL_RCC_OscConfig+0x504>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x52c>
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	4b9c      	ldr	r3, [pc, #624]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	4a9b      	ldr	r2, [pc, #620]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd0:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	4a97      	ldr	r2, [pc, #604]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d016      	beq.n	8002c16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fcba 	bl	8001560 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fcb6 	bl	8001560 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e12a      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c06:	4b8b      	ldr	r3, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ed      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x53c>
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fca3 	bl	8001560 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fc9f 	bl	8001560 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e113      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c34:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ed      	bne.n	8002c1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c42:	7ffb      	ldrb	r3, [r7, #31]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a79      	ldr	r2, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80fe 	beq.w	8002e5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	f040 80d0 	bne.w	8002e08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c68:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d130      	bne.n	8002cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	3b01      	subs	r3, #1
 8002c88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d127      	bne.n	8002cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11f      	bne.n	8002cde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca8:	2a07      	cmp	r2, #7
 8002caa:	bf14      	ite	ne
 8002cac:	2201      	movne	r2, #1
 8002cae:	2200      	moveq	r2, #0
 8002cb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d06e      	beq.n	8002dbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d069      	beq.n	8002db8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0ad      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d0c:	f7fe fc28 	bl	8001560 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fc24 	bl	8001560 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e09a      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d32:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x784>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d42:	3a01      	subs	r2, #1
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d4c:	0212      	lsls	r2, r2, #8
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0552      	lsls	r2, r2, #21
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0652      	lsls	r2, r2, #25
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6c:	0912      	lsrs	r2, r2, #4
 8002d6e:	0452      	lsls	r2, r2, #17
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4930      	ldr	r1, [pc, #192]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d90:	f7fe fbe6 	bl	8001560 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fbe2 	bl	8001560 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e058      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db6:	e050      	b.n	8002e5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04f      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d148      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de0:	f7fe fbbe 	bl	8001560 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fbba 	bl	8001560 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e030      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x734>
 8002e06:	e028      	b.n	8002e5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d023      	beq.n	8002e56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x780>)
 8002e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fba1 	bl	8001560 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e20:	e00c      	b.n	8002e3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe fb9d 	bl	8001560 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d905      	bls.n	8002e3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e013      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
 8002e34:	40021000 	.word	0x40021000
 8002e38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ec      	bne.n	8002e22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4905      	ldr	r1, [pc, #20]	; (8002e64 <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x7b4>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
 8002e54:	e001      	b.n	8002e5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	feeefffc 	.word	0xfeeefffc

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0e7      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cf      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d908      	bls.n	8002ede <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4960      	ldr	r1, [pc, #384]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04c      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0a6      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	4b54      	ldr	r3, [pc, #336]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e09a      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e086      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4943      	ldr	r1, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fe fb04 	bl	8001560 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe fb00 	bl	8001560 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e06e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d208      	bcs.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	492b      	ldr	r1, [pc, #172]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d210      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 0207 	bic.w	r2, r3, #7
 8002fc8:	4923      	ldr	r1, [pc, #140]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e036      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4918      	ldr	r1, [pc, #96]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4910      	ldr	r1, [pc, #64]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003020:	f000 f824 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	490b      	ldr	r1, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1f4>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1fc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fa3b 	bl	80014c0 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	72fb      	strb	r3, [r7, #11]

  return status;
 800304e:	7afb      	ldrb	r3, [r7, #11]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	08006588 	.word	0x08006588
 8003064:	20000008 	.word	0x20000008
 8003068:	2000000c 	.word	0x2000000c

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d121      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d11e      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e004      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 80030f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d134      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0xa6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d003      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xac>
 8003110:	e005      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 800311a:	617b      	str	r3, [r7, #20]
      break;
 800311c:	e002      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	fb03 f202 	mul.w	r2, r3, r2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	0e5b      	lsrs	r3, r3, #25
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	3301      	adds	r3, #1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003164:	69bb      	ldr	r3, [r7, #24]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	080065a0 	.word	0x080065a0
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08006598 	.word	0x08006598

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031cc:	f7ff ffda 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0adb      	lsrs	r3, r3, #11
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08006598 	.word	0x08006598

080031f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800320c:	f7ff f9ee 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 8003210:	6178      	str	r0, [r7, #20]
 8003212:	e014      	b.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800322c:	f7ff f9de 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 8003230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d10b      	bne.n	800325e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d919      	bls.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2ba0      	cmp	r3, #160	; 0xa0
 8003250:	d902      	bls.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003252:	2302      	movs	r3, #2
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e013      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003258:	2301      	movs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e010      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d902      	bls.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003264:	2303      	movs	r3, #3
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e00a      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d102      	bne.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003270:	2302      	movs	r3, #2
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e004      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d101      	bne.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 0207 	bic.w	r2, r3, #7
 8003288:	4909      	ldr	r1, [pc, #36]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032bc:	2300      	movs	r3, #0
 80032be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d041      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d8:	d02a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032de:	d824      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e4:	d008      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ea:	d81e      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f4:	d010      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f6:	e018      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f8:	4b86      	ldr	r3, [pc, #536]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a85      	ldr	r2, [pc, #532]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003302:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fabb 	bl	8003888 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fba6 	bl	8003a70 <RCCEx_PLLSAI2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	74fb      	strb	r3, [r7, #19]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003338:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003346:	4973      	ldr	r1, [pc, #460]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d041      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003368:	d02a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800336a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800336e:	d824      	bhi.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003374:	d008      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337a:	d81e      	bhi.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d010      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003386:	e018      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003388:	4b62      	ldr	r3, [pc, #392]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a61      	ldr	r2, [pc, #388]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003394:	e015      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fa73 	bl	8003888 <RCCEx_PLLSAI1_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a6:	e00c      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3320      	adds	r3, #32
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fb5e 	bl	8003a70 <RCCEx_PLLSAI2_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b8:	e003      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	74fb      	strb	r3, [r7, #19]
      break;
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033c8:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d6:	494f      	ldr	r1, [pc, #316]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033de:	e001      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a0 	beq.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f6:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	4a40      	ldr	r2, [pc, #256]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	6593      	str	r3, [r2, #88]	; 0x58
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003434:	f7fe f894 	bl	8001560 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800343a:	e009      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe f890 	bl	8001560 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d902      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	74fb      	strb	r3, [r7, #19]
        break;
 800344e:	e005      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d15c      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01f      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d019      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe f84f 	bl	8001560 <HAL_GetTick>
 80034c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c4:	e00b      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fe f84b 	bl	8001560 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d902      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	74fb      	strb	r3, [r7, #19]
            break;
 80034dc:	e006      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ec      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800350a:	e009      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	74bb      	strb	r3, [r7, #18]
 8003510:	e006      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003520:	7c7b      	ldrb	r3, [r7, #17]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	4a9d      	ldr	r2, [pc, #628]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353e:	4b98      	ldr	r3, [pc, #608]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f023 0203 	bic.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	4994      	ldr	r1, [pc, #592]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 020c 	bic.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	498c      	ldr	r1, [pc, #560]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003582:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4983      	ldr	r1, [pc, #524]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a4:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	497b      	ldr	r1, [pc, #492]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	4972      	ldr	r1, [pc, #456]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e8:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	496a      	ldr	r1, [pc, #424]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	4961      	ldr	r1, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800362c:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	4959      	ldr	r1, [pc, #356]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364e:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	4950      	ldr	r1, [pc, #320]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	4948      	ldr	r1, [pc, #288]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	493f      	ldr	r1, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d028      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	4937      	ldr	r1, [pc, #220]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a31      	ldr	r2, [pc, #196]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e011      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ea:	d10c      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f8c8 	bl	8003888 <RCCEx_PLLSAI1_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d028      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	491f      	ldr	r1, [pc, #124]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003730:	d106      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373c:	60d3      	str	r3, [r2, #12]
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f899 	bl	8003888 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02b      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	4908      	ldr	r1, [pc, #32]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378e:	d109      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a02      	ldr	r2, [pc, #8]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e014      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2101      	movs	r1, #1
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f867 	bl	8003888 <RCCEx_PLLSAI1_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d02f      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e2:	4928      	ldr	r1, [pc, #160]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f2:	d10d      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f844 	bl	8003888 <RCCEx_PLLSAI1_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	74bb      	strb	r3, [r7, #18]
 800380e:	e011      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003818:	d10c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3320      	adds	r3, #32
 800381e:	2102      	movs	r1, #2
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f925 	bl	8003a70 <RCCEx_PLLSAI2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384e:	490d      	ldr	r1, [pc, #52]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003872:	4904      	ldr	r1, [pc, #16]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800387a:	7cbb      	ldrb	r3, [r7, #18]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000

08003888 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003896:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d018      	beq.n	80038d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10d      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
       ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ba:	4b6c      	ldr	r3, [pc, #432]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
       ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d047      	beq.n	800395e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	e044      	b.n	800395e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d018      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x86>
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d825      	bhi.n	800392c <RCCEx_PLLSAI1_Config+0xa4>
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d002      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x62>
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d009      	beq.n	80038fc <RCCEx_PLLSAI1_Config+0x74>
 80038e8:	e020      	b.n	800392c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ea:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fa:	e01a      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038fc:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390c:	e013      	b.n	8003936 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390e:	4b57      	ldr	r3, [pc, #348]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392a:	e006      	b.n	800393a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e004      	b.n	800393c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393a:	bf00      	nop
    }

    if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003942:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	430b      	orrs	r3, r1
 8003958:	4944      	ldr	r1, [pc, #272]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d17d      	bne.n	8003a60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003964:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fdf6 	bl	8001560 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003976:	e009      	b.n	800398c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003978:	f7fd fdf2 	bl	8001560 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	73fb      	strb	r3, [r7, #15]
        break;
 800398a:	e005      	b.n	8003998 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398c:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ef      	bne.n	8003978 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d160      	bne.n	8003a60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a4:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	0211      	lsls	r1, r2, #8
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d2      	ldr	r2, [r2, #12]
 80039ba:	0912      	lsrs	r2, r2, #4
 80039bc:	0452      	lsls	r2, r2, #17
 80039be:	430a      	orrs	r2, r1
 80039c0:	492a      	ldr	r1, [pc, #168]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	610b      	str	r3, [r1, #16]
 80039c6:	e027      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d112      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	0211      	lsls	r1, r2, #8
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6912      	ldr	r2, [r2, #16]
 80039e4:	0852      	lsrs	r2, r2, #1
 80039e6:	3a01      	subs	r2, #1
 80039e8:	0552      	lsls	r2, r2, #21
 80039ea:	430a      	orrs	r2, r1
 80039ec:	491f      	ldr	r1, [pc, #124]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]
 80039f2:	e011      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	0211      	lsls	r1, r2, #8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6952      	ldr	r2, [r2, #20]
 8003a0a:	0852      	lsrs	r2, r2, #1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0652      	lsls	r2, r2, #25
 8003a10:	430a      	orrs	r2, r1
 8003a12:	4916      	ldr	r1, [pc, #88]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fd fd9c 	bl	8001560 <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a2a:	e009      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2c:	f7fd fd98 	bl	8001560 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a3e:	e005      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ef      	beq.n	8003a2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000

08003a70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d018      	beq.n	8003abc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a8a:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10d      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aa2:	4b61      	ldr	r3, [pc, #388]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d047      	beq.n	8003b46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e044      	b.n	8003b46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d018      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x86>
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d825      	bhi.n	8003b14 <RCCEx_PLLSAI2_Config+0xa4>
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d002      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0x62>
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d009      	beq.n	8003ae4 <RCCEx_PLLSAI2_Config+0x74>
 8003ad0:	e020      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ad2:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11d      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e01a      	b.n	8003b1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e013      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af6:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b02:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b12:	e006      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e004      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10d      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	4939      	ldr	r1, [pc, #228]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d167      	bne.n	8003c1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd fd02 	bl	8001560 <HAL_GetTick>
 8003b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b5e:	e009      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b60:	f7fd fcfe 	bl	8001560 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d902      	bls.n	8003b74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	73fb      	strb	r3, [r7, #15]
        break;
 8003b72:	e005      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ef      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d14a      	bne.n	8003c1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6892      	ldr	r2, [r2, #8]
 8003b9c:	0211      	lsls	r1, r2, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	0912      	lsrs	r2, r2, #4
 8003ba4:	0452      	lsls	r2, r2, #17
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	491f      	ldr	r1, [pc, #124]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	614b      	str	r3, [r1, #20]
 8003bae:	e011      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6912      	ldr	r2, [r2, #16]
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0652      	lsls	r2, r2, #25
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	4916      	ldr	r1, [pc, #88]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fcbe 	bl	8001560 <HAL_GetTick>
 8003be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003be6:	e009      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be8:	f7fd fcba 	bl	8001560 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d902      	bls.n	8003bfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfa:	e005      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ef      	beq.n	8003be8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4904      	ldr	r1, [pc, #16]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd fa9e 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fe74 	bl	8004960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fbb9 	bl	80043f0 <UART_SetConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01b      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fef3 	bl	8004aa4 <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d178      	bne.n	8003dd2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x24>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e071      	b.n	8003dd4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fc2f 	bl	8001560 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e030      	b.n	8003d9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 ff55 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03c      	b.n	8003dd4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3302      	adds	r3, #2
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e008      	b.n	8003d8a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b292      	uxth	r2, r2
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1c8      	bne.n	8003d3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 ff1e 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e005      	b.n	8003dd4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0ba      	sub	sp, #232	; 0xe8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00f      	beq.n	8003e44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 82ae 	beq.w	8004396 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
      }
      return;
 8003e42:	e2a8      	b.n	8004396 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8117 	beq.w	800407c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e5e:	4b85      	ldr	r3, [pc, #532]	; (8004074 <HAL_UART_IRQHandler+0x298>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 810a 	beq.w	800407c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d011      	beq.n	8003e98 <HAL_UART_IRQHandler+0xbc>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2201      	movs	r2, #1
 8003e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xec>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d011      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x11c>
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	f043 0208 	orr.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <HAL_UART_IRQHandler+0x18a>
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8214 	beq.w	800439a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04f      	beq.n	800405e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fe7f 	bl	8004cc2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d141      	bne.n	8004056 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1d9      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	2b00      	cmp	r3, #0
 8004024:	d013      	beq.n	800404e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_UART_IRQHandler+0x29c>)
 800402c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fc13 	bl	800185e <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004048:	4610      	mov	r0, r2
 800404a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e00f      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9b8 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e00b      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9b4 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e007      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9b0 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800406c:	e195      	b.n	800439a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	bf00      	nop
    return;
 8004070:	e193      	b.n	800439a <HAL_UART_IRQHandler+0x5be>
 8004072:	bf00      	nop
 8004074:	04000120 	.word	0x04000120
 8004078:	08004d8b 	.word	0x08004d8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 814e 	bne.w	8004322 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8147 	beq.w	8004322 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8140 	beq.w	8004322 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	f040 80b8 	bne.w	800422a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8167 	beq.w	800439e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040da:	429a      	cmp	r2, r3
 80040dc:	f080 815f 	bcs.w	800439e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 8086 	bne.w	8004208 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800412a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1da      	bne.n	80040fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800416a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800416e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800417c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e1      	bne.n	8004146 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	f023 0310 	bic.w	r3, r3, #16
 80041dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e4      	bne.n	80041c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd faed 	bl	80017e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800421a:	b29b      	uxth	r3, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8d8 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004228:	e0b9      	b.n	800439e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004236:	b29b      	uxth	r3, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80ab 	beq.w	80043a2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800424c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80a6 	beq.w	80043a2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004278:	647b      	str	r3, [r7, #68]	; 0x44
 800427a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800427e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e4      	bne.n	8004256 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	623b      	str	r3, [r7, #32]
   return(result);
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b0:	633a      	str	r2, [r7, #48]	; 0x30
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e3      	bne.n	800428c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	617b      	str	r3, [r7, #20]
   return(result);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e4      	bne.n	80042d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f85c 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004320:	e03f      	b.n	80043a2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00e      	beq.n	800434c <HAL_UART_IRQHandler+0x570>
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004342:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fd60 	bl	8004e0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800434a:	e02d      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01c      	beq.n	80043a6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
    }
    return;
 8004374:	e017      	b.n	80043a6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fd11 	bl	8004db6 <UART_EndTransmit_IT>
    return;
 8004394:	e008      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004396:	bf00      	nop
 8004398:	e006      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043a8:	37e8      	adds	r7, #232	; 0xe8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop

080043b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f4:	b08a      	sub	sp, #40	; 0x28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	4313      	orrs	r3, r2
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4ba4      	ldr	r3, [pc, #656]	; (80046b0 <UART_SetConfig+0x2c0>)
 8004420:	4013      	ands	r3, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004428:	430b      	orrs	r3, r1
 800442a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a99      	ldr	r2, [pc, #612]	; (80046b4 <UART_SetConfig+0x2c4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	4313      	orrs	r3, r2
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a90      	ldr	r2, [pc, #576]	; (80046b8 <UART_SetConfig+0x2c8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d126      	bne.n	80044c8 <UART_SetConfig+0xd8>
 800447a:	4b90      	ldr	r3, [pc, #576]	; (80046bc <UART_SetConfig+0x2cc>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d81b      	bhi.n	80044c0 <UART_SetConfig+0xd0>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0xa0>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044b1 	.word	0x080044b1
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e116      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e112      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80044b0:	2304      	movs	r3, #4
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e10e      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e10a      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e106      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a7c      	ldr	r2, [pc, #496]	; (80046c0 <UART_SetConfig+0x2d0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d138      	bne.n	8004544 <UART_SetConfig+0x154>
 80044d2:	4b7a      	ldr	r3, [pc, #488]	; (80046bc <UART_SetConfig+0x2cc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d82d      	bhi.n	800453c <UART_SetConfig+0x14c>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0xf8>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800451d 	.word	0x0800451d
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800453d 	.word	0x0800453d
 80044f4:	0800453d 	.word	0x0800453d
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800453d 	.word	0x0800453d
 8004500:	0800453d 	.word	0x0800453d
 8004504:	0800453d 	.word	0x0800453d
 8004508:	08004525 	.word	0x08004525
 800450c:	0800453d 	.word	0x0800453d
 8004510:	0800453d 	.word	0x0800453d
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004535 	.word	0x08004535
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e0d8      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004524:	2302      	movs	r3, #2
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e0d4      	b.n	80046d6 <UART_SetConfig+0x2e6>
 800452c:	2304      	movs	r3, #4
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e0d0      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004534:	2308      	movs	r3, #8
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e0cc      	b.n	80046d6 <UART_SetConfig+0x2e6>
 800453c:	2310      	movs	r3, #16
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e0c8      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <UART_SetConfig+0x2d4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d125      	bne.n	800459a <UART_SetConfig+0x1aa>
 800454e:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <UART_SetConfig+0x2cc>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d016      	beq.n	800458a <UART_SetConfig+0x19a>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d818      	bhi.n	8004592 <UART_SetConfig+0x1a2>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d00a      	beq.n	800457a <UART_SetConfig+0x18a>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d814      	bhi.n	8004592 <UART_SetConfig+0x1a2>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <UART_SetConfig+0x182>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d008      	beq.n	8004582 <UART_SetConfig+0x192>
 8004570:	e00f      	b.n	8004592 <UART_SetConfig+0x1a2>
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004578:	e0ad      	b.n	80046d6 <UART_SetConfig+0x2e6>
 800457a:	2302      	movs	r3, #2
 800457c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004580:	e0a9      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004582:	2304      	movs	r3, #4
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004588:	e0a5      	b.n	80046d6 <UART_SetConfig+0x2e6>
 800458a:	2308      	movs	r3, #8
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004590:	e0a1      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004592:	2310      	movs	r3, #16
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004598:	e09d      	b.n	80046d6 <UART_SetConfig+0x2e6>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <UART_SetConfig+0x2d8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d125      	bne.n	80045f0 <UART_SetConfig+0x200>
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <UART_SetConfig+0x2cc>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045ae:	2bc0      	cmp	r3, #192	; 0xc0
 80045b0:	d016      	beq.n	80045e0 <UART_SetConfig+0x1f0>
 80045b2:	2bc0      	cmp	r3, #192	; 0xc0
 80045b4:	d818      	bhi.n	80045e8 <UART_SetConfig+0x1f8>
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d00a      	beq.n	80045d0 <UART_SetConfig+0x1e0>
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d814      	bhi.n	80045e8 <UART_SetConfig+0x1f8>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <UART_SetConfig+0x1d8>
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d008      	beq.n	80045d8 <UART_SetConfig+0x1e8>
 80045c6:	e00f      	b.n	80045e8 <UART_SetConfig+0x1f8>
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e082      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e07e      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e07a      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e076      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e072      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a35      	ldr	r2, [pc, #212]	; (80046cc <UART_SetConfig+0x2dc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d12a      	bne.n	8004650 <UART_SetConfig+0x260>
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <UART_SetConfig+0x2cc>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d01a      	beq.n	8004640 <UART_SetConfig+0x250>
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d81b      	bhi.n	8004648 <UART_SetConfig+0x258>
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d00c      	beq.n	8004630 <UART_SetConfig+0x240>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d815      	bhi.n	8004648 <UART_SetConfig+0x258>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <UART_SetConfig+0x238>
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d008      	beq.n	8004638 <UART_SetConfig+0x248>
 8004626:	e00f      	b.n	8004648 <UART_SetConfig+0x258>
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e052      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004630:	2302      	movs	r3, #2
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004636:	e04e      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004638:	2304      	movs	r3, #4
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463e:	e04a      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004640:	2308      	movs	r3, #8
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e046      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004648:	2310      	movs	r3, #16
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e042      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <UART_SetConfig+0x2c4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d13a      	bne.n	80046d0 <UART_SetConfig+0x2e0>
 800465a:	4b18      	ldr	r3, [pc, #96]	; (80046bc <UART_SetConfig+0x2cc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004668:	d01a      	beq.n	80046a0 <UART_SetConfig+0x2b0>
 800466a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466e:	d81b      	bhi.n	80046a8 <UART_SetConfig+0x2b8>
 8004670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004674:	d00c      	beq.n	8004690 <UART_SetConfig+0x2a0>
 8004676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467a:	d815      	bhi.n	80046a8 <UART_SetConfig+0x2b8>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <UART_SetConfig+0x298>
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	d008      	beq.n	8004698 <UART_SetConfig+0x2a8>
 8004686:	e00f      	b.n	80046a8 <UART_SetConfig+0x2b8>
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e022      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004690:	2302      	movs	r3, #2
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e01e      	b.n	80046d6 <UART_SetConfig+0x2e6>
 8004698:	2304      	movs	r3, #4
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469e:	e01a      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80046a0:	2308      	movs	r3, #8
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a6:	e016      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80046a8:	2310      	movs	r3, #16
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ae:	e012      	b.n	80046d6 <UART_SetConfig+0x2e6>
 80046b0:	efff69f3 	.word	0xefff69f3
 80046b4:	40008000 	.word	0x40008000
 80046b8:	40013800 	.word	0x40013800
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40004400 	.word	0x40004400
 80046c4:	40004800 	.word	0x40004800
 80046c8:	40004c00 	.word	0x40004c00
 80046cc:	40005000 	.word	0x40005000
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a9f      	ldr	r2, [pc, #636]	; (8004958 <UART_SetConfig+0x568>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d17a      	bne.n	80047d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d824      	bhi.n	8004732 <UART_SetConfig+0x342>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x300>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004733 	.word	0x08004733
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004723 	.word	0x08004723
 8004704:	08004733 	.word	0x08004733
 8004708:	08004733 	.word	0x08004733
 800470c:	08004733 	.word	0x08004733
 8004710:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe fd42 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8004718:	61f8      	str	r0, [r7, #28]
        break;
 800471a:	e010      	b.n	800473e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b8f      	ldr	r3, [pc, #572]	; (800495c <UART_SetConfig+0x56c>)
 800471e:	61fb      	str	r3, [r7, #28]
        break;
 8004720:	e00d      	b.n	800473e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fe fca3 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004726:	61f8      	str	r0, [r7, #28]
        break;
 8004728:	e009      	b.n	800473e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61fb      	str	r3, [r7, #28]
        break;
 8004730:	e005      	b.n	800473e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800473c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80fb 	beq.w	800493c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	429a      	cmp	r2, r3
 8004754:	d305      	bcc.n	8004762 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	429a      	cmp	r2, r3
 8004760:	d903      	bls.n	800476a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004768:	e0e8      	b.n	800493c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2200      	movs	r2, #0
 800476e:	461c      	mov	r4, r3
 8004770:	4615      	mov	r5, r2
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	022b      	lsls	r3, r5, #8
 800477c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004780:	0222      	lsls	r2, r4, #8
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6849      	ldr	r1, [r1, #4]
 8004786:	0849      	lsrs	r1, r1, #1
 8004788:	2000      	movs	r0, #0
 800478a:	4688      	mov	r8, r1
 800478c:	4681      	mov	r9, r0
 800478e:	eb12 0a08 	adds.w	sl, r2, r8
 8004792:	eb43 0b09 	adc.w	fp, r3, r9
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a4:	4650      	mov	r0, sl
 80047a6:	4659      	mov	r1, fp
 80047a8:	f7fb fd62 	bl	8000270 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4613      	mov	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ba:	d308      	bcc.n	80047ce <UART_SetConfig+0x3de>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d204      	bcs.n	80047ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	e0b6      	b.n	800493c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d4:	e0b2      	b.n	800493c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d15e      	bne.n	800489e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d828      	bhi.n	800483a <UART_SetConfig+0x44a>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0x400>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004815 	.word	0x08004815
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004825 	.word	0x08004825
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	0800482b 	.word	0x0800482b
 8004804:	0800483b 	.word	0x0800483b
 8004808:	0800483b 	.word	0x0800483b
 800480c:	0800483b 	.word	0x0800483b
 8004810:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7fe fcc2 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8004818:	61f8      	str	r0, [r7, #28]
        break;
 800481a:	e014      	b.n	8004846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fe fcd4 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8004820:	61f8      	str	r0, [r7, #28]
        break;
 8004822:	e010      	b.n	8004846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b4d      	ldr	r3, [pc, #308]	; (800495c <UART_SetConfig+0x56c>)
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e00d      	b.n	8004846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe fc1f 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800482e:	61f8      	str	r0, [r7, #28]
        break;
 8004830:	e009      	b.n	8004846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e005      	b.n	8004846 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d077      	beq.n	800493c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005a      	lsls	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d916      	bls.n	8004896 <UART_SetConfig+0x4a6>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486e:	d212      	bcs.n	8004896 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f023 030f 	bic.w	r3, r3, #15
 8004878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b29a      	uxth	r2, r3
 8004886:	8afb      	ldrh	r3, [r7, #22]
 8004888:	4313      	orrs	r3, r2
 800488a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	8afa      	ldrh	r2, [r7, #22]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e052      	b.n	800493c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800489c:	e04e      	b.n	800493c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d827      	bhi.n	80048f6 <UART_SetConfig+0x506>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x4bc>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe fc64 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fe fc76 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <UART_SetConfig+0x56c>)
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe fbc1 	bl	800306c <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004900:	bf00      	nop
    }

    if (pclk != 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d019      	beq.n	800493c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	085a      	lsrs	r2, r3, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d909      	bls.n	8004936 <UART_SetConfig+0x546>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d205      	bcs.n	8004936 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	e002      	b.n	800493c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	40008000 	.word	0x40008000
 800495c:	00f42400 	.word	0x00f42400

08004960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d10a      	bne.n	8004a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b098      	sub	sp, #96	; 0x60
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab4:	f7fc fd54 	bl	8001560 <HAL_GetTick>
 8004ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d12e      	bne.n	8004b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f88c 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d021      	beq.n	8004b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
 8004b02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e062      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d149      	bne.n	8004bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f856 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03c      	beq.n	8004bc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e011      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3758      	adds	r7, #88	; 0x58
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	e049      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d045      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc fca7 	bl	8001560 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e048      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d031      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d110      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f838 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2208      	movs	r2, #8
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	d111      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81e 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0a6      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b095      	sub	sp, #84	; 0x54
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d118      	bne.n	8004d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	613b      	str	r3, [r7, #16]
   return(result);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	; 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fb0b 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fad7 	bl	80043b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af04      	add	r7, sp, #16
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	1dfb      	adds	r3, r7, #7
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2301      	movs	r3, #1
 8004e46:	2200      	movs	r2, #0
 8004e48:	2178      	movs	r1, #120	; 0x78
 8004e4a:	4803      	ldr	r0, [pc, #12]	; (8004e58 <ssd1306_WriteCommand+0x2c>)
 8004e4c:	f7fc ffbe 	bl	8001dcc <HAL_I2C_Mem_Write>
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200000a8 	.word	0x200000a8

08004e5c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af04      	add	r7, sp, #16
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6e:	9202      	str	r2, [sp, #8]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2301      	movs	r3, #1
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	2178      	movs	r1, #120	; 0x78
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <ssd1306_WriteData+0x30>)
 8004e7e:	f7fc ffa5 	bl	8001dcc <HAL_I2C_Mem_Write>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200000a8 	.word	0x200000a8

08004e90 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004e94:	f7ff ffc3 	bl	8004e1e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004e98:	2064      	movs	r0, #100	; 0x64
 8004e9a:	f7fc fb6d 	bl	8001578 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f000 f9da 	bl	8005258 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004ea4:	2020      	movs	r0, #32
 8004ea6:	f7ff ffc1 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7ff ffbe 	bl	8004e2c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004eb0:	20b0      	movs	r0, #176	; 0xb0
 8004eb2:	f7ff ffbb 	bl	8004e2c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004eb6:	20c8      	movs	r0, #200	; 0xc8
 8004eb8:	f7ff ffb8 	bl	8004e2c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7ff ffb5 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004ec2:	2010      	movs	r0, #16
 8004ec4:	f7ff ffb2 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004ec8:	2040      	movs	r0, #64	; 0x40
 8004eca:	f7ff ffaf 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004ece:	20ff      	movs	r0, #255	; 0xff
 8004ed0:	f000 f9ae 	bl	8005230 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004ed4:	20a1      	movs	r0, #161	; 0xa1
 8004ed6:	f7ff ffa9 	bl	8004e2c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004eda:	20a6      	movs	r0, #166	; 0xa6
 8004edc:	f7ff ffa6 	bl	8004e2c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004ee0:	20a8      	movs	r0, #168	; 0xa8
 8004ee2:	f7ff ffa3 	bl	8004e2c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004ee6:	203f      	movs	r0, #63	; 0x3f
 8004ee8:	f7ff ffa0 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004eec:	20a4      	movs	r0, #164	; 0xa4
 8004eee:	f7ff ff9d 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004ef2:	20d3      	movs	r0, #211	; 0xd3
 8004ef4:	f7ff ff9a 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff ff97 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004efe:	20d5      	movs	r0, #213	; 0xd5
 8004f00:	f7ff ff94 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004f04:	20f0      	movs	r0, #240	; 0xf0
 8004f06:	f7ff ff91 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004f0a:	20d9      	movs	r0, #217	; 0xd9
 8004f0c:	f7ff ff8e 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004f10:	2022      	movs	r0, #34	; 0x22
 8004f12:	f7ff ff8b 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004f16:	20da      	movs	r0, #218	; 0xda
 8004f18:	f7ff ff88 	bl	8004e2c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004f1c:	2012      	movs	r0, #18
 8004f1e:	f7ff ff85 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004f22:	20db      	movs	r0, #219	; 0xdb
 8004f24:	f7ff ff82 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004f28:	2020      	movs	r0, #32
 8004f2a:	f7ff ff7f 	bl	8004e2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	f7ff ff7c 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004f34:	2014      	movs	r0, #20
 8004f36:	f7ff ff79 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f000 f98c 	bl	8005258 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f000 f80f 	bl	8004f64 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004f46:	f000 f831 	bl	8004fac <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <ssd1306_Init+0xd0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <ssd1306_Init+0xd0>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004f56:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <ssd1306_Init+0xd0>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	711a      	strb	r2, [r3, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200005a4 	.word	0x200005a4

08004f64 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e00d      	b.n	8004f90 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <ssd1306_Fill+0x1a>
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	e000      	b.n	8004f80 <ssd1306_Fill+0x1c>
 8004f7e:	21ff      	movs	r1, #255	; 0xff
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <ssd1306_Fill+0x44>)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	460a      	mov	r2, r1
 8004f88:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f96:	d3ed      	bcc.n	8004f74 <ssd1306_Fill+0x10>
    }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	200001a4 	.word	0x200001a4

08004fac <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	71fb      	strb	r3, [r7, #7]
 8004fb6:	e016      	b.n	8004fe6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	3b50      	subs	r3, #80	; 0x50
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff34 	bl	8004e2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f7ff ff31 	bl	8004e2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004fca:	2010      	movs	r0, #16
 8004fcc:	f7ff ff2e 	bl	8004e2c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	01db      	lsls	r3, r3, #7
 8004fd4:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <ssd1306_UpdateScreen+0x4c>)
 8004fd6:	4413      	add	r3, r2
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff3e 	bl	8004e5c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	71fb      	strb	r3, [r7, #7]
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b07      	cmp	r3, #7
 8004fea:	d9e5      	bls.n	8004fb8 <ssd1306_UpdateScreen+0xc>
    }
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200001a4 	.word	0x200001a4

08004ffc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
 8005006:	460b      	mov	r3, r1
 8005008:	71bb      	strb	r3, [r7, #6]
 800500a:	4613      	mov	r3, r2
 800500c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db3d      	blt.n	8005092 <ssd1306_DrawPixel+0x96>
 8005016:	79bb      	ldrb	r3, [r7, #6]
 8005018:	2b3f      	cmp	r3, #63	; 0x3f
 800501a:	d83a      	bhi.n	8005092 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800501c:	797b      	ldrb	r3, [r7, #5]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11a      	bne.n	8005058 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005022:	79fa      	ldrb	r2, [r7, #7]
 8005024:	79bb      	ldrb	r3, [r7, #6]
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	b2d8      	uxtb	r0, r3
 800502a:	4603      	mov	r3, r0
 800502c:	01db      	lsls	r3, r3, #7
 800502e:	4413      	add	r3, r2
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <ssd1306_DrawPixel+0xa4>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	b25a      	sxtb	r2, r3
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	b25b      	sxtb	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b259      	sxtb	r1, r3
 8005048:	79fa      	ldrb	r2, [r7, #7]
 800504a:	4603      	mov	r3, r0
 800504c:	01db      	lsls	r3, r3, #7
 800504e:	4413      	add	r3, r2
 8005050:	b2c9      	uxtb	r1, r1
 8005052:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <ssd1306_DrawPixel+0xa4>)
 8005054:	54d1      	strb	r1, [r2, r3]
 8005056:	e01d      	b.n	8005094 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005058:	79fa      	ldrb	r2, [r7, #7]
 800505a:	79bb      	ldrb	r3, [r7, #6]
 800505c:	08db      	lsrs	r3, r3, #3
 800505e:	b2d8      	uxtb	r0, r3
 8005060:	4603      	mov	r3, r0
 8005062:	01db      	lsls	r3, r3, #7
 8005064:	4413      	add	r3, r2
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <ssd1306_DrawPixel+0xa4>)
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	b25a      	sxtb	r2, r3
 800506c:	79bb      	ldrb	r3, [r7, #6]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	b25b      	sxtb	r3, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	b25b      	sxtb	r3, r3
 800507e:	4013      	ands	r3, r2
 8005080:	b259      	sxtb	r1, r3
 8005082:	79fa      	ldrb	r2, [r7, #7]
 8005084:	4603      	mov	r3, r0
 8005086:	01db      	lsls	r3, r3, #7
 8005088:	4413      	add	r3, r2
 800508a:	b2c9      	uxtb	r1, r1
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <ssd1306_DrawPixel+0xa4>)
 800508e:	54d1      	strb	r1, [r2, r3]
 8005090:	e000      	b.n	8005094 <ssd1306_DrawPixel+0x98>
        return;
 8005092:	bf00      	nop
    }
}
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	200001a4 	.word	0x200001a4

080050a4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4604      	mov	r4, r0
 80050ac:	1d38      	adds	r0, r7, #4
 80050ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80050b2:	461a      	mov	r2, r3
 80050b4:	4623      	mov	r3, r4
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	4613      	mov	r3, r2
 80050ba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b1f      	cmp	r3, #31
 80050c0:	d902      	bls.n	80050c8 <ssd1306_WriteChar+0x24>
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b7e      	cmp	r3, #126	; 0x7e
 80050c6:	d901      	bls.n	80050cc <ssd1306_WriteChar+0x28>
        return 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e06d      	b.n	80051a8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80050cc:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	793b      	ldrb	r3, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	dc06      	bgt.n	80050e8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80050da:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 80050dc:	885b      	ldrh	r3, [r3, #2]
 80050de:	461a      	mov	r2, r3
 80050e0:	797b      	ldrb	r3, [r7, #5]
 80050e2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	dd01      	ble.n	80050ec <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e05d      	b.n	80051a8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e04c      	b.n	800518c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	3b20      	subs	r3, #32
 80050f8:	7979      	ldrb	r1, [r7, #5]
 80050fa:	fb01 f303 	mul.w	r3, r1, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	440b      	add	r3, r1
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800510c:	2300      	movs	r3, #0
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e034      	b.n	800517c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	4413      	add	r3, r2
 800512e:	b2d8      	uxtb	r0, r3
 8005130:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 8005132:	885b      	ldrh	r3, [r3, #2]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4413      	add	r3, r2
 800513c:	b2db      	uxtb	r3, r3
 800513e:	7bba      	ldrb	r2, [r7, #14]
 8005140:	4619      	mov	r1, r3
 8005142:	f7ff ff5b 	bl	8004ffc <ssd1306_DrawPixel>
 8005146:	e016      	b.n	8005176 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4413      	add	r3, r2
 8005154:	b2d8      	uxtb	r0, r3
 8005156:	4b16      	ldr	r3, [pc, #88]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 8005158:	885b      	ldrh	r3, [r3, #2]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	4413      	add	r3, r2
 8005162:	b2d9      	uxtb	r1, r3
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	f7ff ff43 	bl	8004ffc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3301      	adds	r3, #1
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	793b      	ldrb	r3, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	4293      	cmp	r3, r2
 8005184:	d3c5      	bcc.n	8005112 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	797b      	ldrb	r3, [r7, #5]
 800518e:	461a      	mov	r2, r3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4293      	cmp	r3, r2
 8005194:	d3ad      	bcc.n	80050f2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	793b      	ldrb	r3, [r7, #4]
 800519c:	b29b      	uxth	r3, r3
 800519e:	4413      	add	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <ssd1306_WriteChar+0x10c>)
 80051a4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3724      	adds	r7, #36	; 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	200005a4 	.word	0x200005a4

080051b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	1d38      	adds	r0, r7, #4
 80051be:	e880 0006 	stmia.w	r0, {r1, r2}
 80051c2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80051c4:	e012      	b.n	80051ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	7818      	ldrb	r0, [r3, #0]
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	1d3a      	adds	r2, r7, #4
 80051ce:	ca06      	ldmia	r2, {r1, r2}
 80051d0:	f7ff ff68 	bl	80050a4 <ssd1306_WriteChar>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d002      	beq.n	80051e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	e008      	b.n	80051f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e8      	bne.n	80051c6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	781b      	ldrb	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	460a      	mov	r2, r1
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	4613      	mov	r3, r2
 800520e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	b29a      	uxth	r2, r3
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <ssd1306_SetCursor+0x2c>)
 8005216:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005218:	79bb      	ldrb	r3, [r7, #6]
 800521a:	b29a      	uxth	r2, r3
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <ssd1306_SetCursor+0x2c>)
 800521e:	805a      	strh	r2, [r3, #2]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	200005a4 	.word	0x200005a4

08005230 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800523a:	2381      	movs	r3, #129	; 0x81
 800523c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fdf3 	bl	8004e2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fdef 	bl	8004e2c <ssd1306_WriteCommand>
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005268:	23af      	movs	r3, #175	; 0xaf
 800526a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800526c:	4b08      	ldr	r3, [pc, #32]	; (8005290 <ssd1306_SetDisplayOn+0x38>)
 800526e:	2201      	movs	r2, #1
 8005270:	715a      	strb	r2, [r3, #5]
 8005272:	e004      	b.n	800527e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005274:	23ae      	movs	r3, #174	; 0xae
 8005276:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <ssd1306_SetDisplayOn+0x38>)
 800527a:	2200      	movs	r2, #0
 800527c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fdd3 	bl	8004e2c <ssd1306_WriteCommand>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200005a4 	.word	0x200005a4

08005294 <std>:
 8005294:	2300      	movs	r3, #0
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	e9c0 3300 	strd	r3, r3, [r0]
 800529e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a2:	6083      	str	r3, [r0, #8]
 80052a4:	8181      	strh	r1, [r0, #12]
 80052a6:	6643      	str	r3, [r0, #100]	; 0x64
 80052a8:	81c2      	strh	r2, [r0, #14]
 80052aa:	6183      	str	r3, [r0, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2208      	movs	r2, #8
 80052b0:	305c      	adds	r0, #92	; 0x5c
 80052b2:	f000 f93a 	bl	800552a <memset>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <std+0x58>)
 80052b8:	6263      	str	r3, [r4, #36]	; 0x24
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <std+0x5c>)
 80052bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <std+0x60>)
 80052c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <std+0x64>)
 80052c4:	6323      	str	r3, [r4, #48]	; 0x30
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <std+0x68>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d006      	beq.n	80052dc <std+0x48>
 80052ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052d2:	4294      	cmp	r4, r2
 80052d4:	d002      	beq.n	80052dc <std+0x48>
 80052d6:	33d0      	adds	r3, #208	; 0xd0
 80052d8:	429c      	cmp	r4, r3
 80052da:	d105      	bne.n	80052e8 <std+0x54>
 80052dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f000 b99a 	b.w	800561c <__retarget_lock_init_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	080054a5 	.word	0x080054a5
 80052f0:	080054c7 	.word	0x080054c7
 80052f4:	080054ff 	.word	0x080054ff
 80052f8:	08005523 	.word	0x08005523
 80052fc:	200005ac 	.word	0x200005ac

08005300 <stdio_exit_handler>:
 8005300:	4a02      	ldr	r2, [pc, #8]	; (800530c <stdio_exit_handler+0xc>)
 8005302:	4903      	ldr	r1, [pc, #12]	; (8005310 <stdio_exit_handler+0x10>)
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <stdio_exit_handler+0x14>)
 8005306:	f000 b869 	b.w	80053dc <_fwalk_sglue>
 800530a:	bf00      	nop
 800530c:	2000002c 	.word	0x2000002c
 8005310:	08006195 	.word	0x08006195
 8005314:	20000038 	.word	0x20000038

08005318 <cleanup_stdio>:
 8005318:	6841      	ldr	r1, [r0, #4]
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <cleanup_stdio+0x34>)
 800531c:	4299      	cmp	r1, r3
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d001      	beq.n	8005328 <cleanup_stdio+0x10>
 8005324:	f000 ff36 	bl	8006194 <_fflush_r>
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <cleanup_stdio+0x38>)
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <cleanup_stdio+0x1e>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 ff2f 	bl	8006194 <_fflush_r>
 8005336:	68e1      	ldr	r1, [r4, #12]
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <cleanup_stdio+0x3c>)
 800533a:	4299      	cmp	r1, r3
 800533c:	d004      	beq.n	8005348 <cleanup_stdio+0x30>
 800533e:	4620      	mov	r0, r4
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f000 bf26 	b.w	8006194 <_fflush_r>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	200005ac 	.word	0x200005ac
 8005350:	20000614 	.word	0x20000614
 8005354:	2000067c 	.word	0x2000067c

08005358 <global_stdio_init.part.0>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <global_stdio_init.part.0+0x30>)
 800535c:	4c0b      	ldr	r4, [pc, #44]	; (800538c <global_stdio_init.part.0+0x34>)
 800535e:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <global_stdio_init.part.0+0x38>)
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2104      	movs	r1, #4
 8005368:	f7ff ff94 	bl	8005294 <std>
 800536c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005370:	2201      	movs	r2, #1
 8005372:	2109      	movs	r1, #9
 8005374:	f7ff ff8e 	bl	8005294 <std>
 8005378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800537c:	2202      	movs	r2, #2
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff bf86 	b.w	8005294 <std>
 8005388:	200006e4 	.word	0x200006e4
 800538c:	200005ac 	.word	0x200005ac
 8005390:	08005301 	.word	0x08005301

08005394 <__sfp_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__sfp_lock_acquire+0x8>)
 8005396:	f000 b942 	b.w	800561e <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	200006ed 	.word	0x200006ed

080053a0 <__sfp_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__sfp_lock_release+0x8>)
 80053a2:	f000 b93d 	b.w	8005620 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	200006ed 	.word	0x200006ed

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sfp_lock_acquire>
 80053b4:	6a23      	ldr	r3, [r4, #32]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sfp_lock_release>
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__sinit+0x28>)
 80053c2:	6223      	str	r3, [r4, #32]
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__sinit+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <__sinit+0xc>
 80053cc:	f7ff ffc4 	bl	8005358 <global_stdio_init.part.0>
 80053d0:	e7f2      	b.n	80053b8 <__sinit+0xc>
 80053d2:	bf00      	nop
 80053d4:	08005319 	.word	0x08005319
 80053d8:	200006e4 	.word	0x200006e4

080053dc <_fwalk_sglue>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4607      	mov	r7, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	2600      	movs	r6, #0
 80053e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ec:	f1b9 0901 	subs.w	r9, r9, #1
 80053f0:	d505      	bpl.n	80053fe <_fwalk_sglue+0x22>
 80053f2:	6824      	ldr	r4, [r4, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d1f7      	bne.n	80053e8 <_fwalk_sglue+0xc>
 80053f8:	4630      	mov	r0, r6
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d907      	bls.n	8005414 <_fwalk_sglue+0x38>
 8005404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	d003      	beq.n	8005414 <_fwalk_sglue+0x38>
 800540c:	4629      	mov	r1, r5
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	4306      	orrs	r6, r0
 8005414:	3568      	adds	r5, #104	; 0x68
 8005416:	e7e9      	b.n	80053ec <_fwalk_sglue+0x10>

08005418 <iprintf>:
 8005418:	b40f      	push	{r0, r1, r2, r3}
 800541a:	b507      	push	{r0, r1, r2, lr}
 800541c:	4906      	ldr	r1, [pc, #24]	; (8005438 <iprintf+0x20>)
 800541e:	ab04      	add	r3, sp, #16
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	f853 2b04 	ldr.w	r2, [r3], #4
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f000 fb83 	bl	8005b34 <_vfiprintf_r>
 800542e:	b003      	add	sp, #12
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr
 8005438:	20000084 	.word	0x20000084

0800543c <sniprintf>:
 800543c:	b40c      	push	{r2, r3}
 800543e:	b530      	push	{r4, r5, lr}
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <sniprintf+0x64>)
 8005442:	1e0c      	subs	r4, r1, #0
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	b09d      	sub	sp, #116	; 0x74
 8005448:	da08      	bge.n	800545c <sniprintf+0x20>
 800544a:	238b      	movs	r3, #139	; 0x8b
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295
 8005452:	b01d      	add	sp, #116	; 0x74
 8005454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005458:	b002      	add	sp, #8
 800545a:	4770      	bx	lr
 800545c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005460:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005464:	bf14      	ite	ne
 8005466:	f104 33ff 	addne.w	r3, r4, #4294967295
 800546a:	4623      	moveq	r3, r4
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005474:	9002      	str	r0, [sp, #8]
 8005476:	9006      	str	r0, [sp, #24]
 8005478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800547c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800547e:	ab21      	add	r3, sp, #132	; 0x84
 8005480:	a902      	add	r1, sp, #8
 8005482:	4628      	mov	r0, r5
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	f000 fa2d 	bl	80058e4 <_svfiprintf_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	bfbc      	itt	lt
 800548e:	238b      	movlt	r3, #139	; 0x8b
 8005490:	602b      	strlt	r3, [r5, #0]
 8005492:	2c00      	cmp	r4, #0
 8005494:	d0dd      	beq.n	8005452 <sniprintf+0x16>
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e7d9      	b.n	8005452 <sniprintf+0x16>
 800549e:	bf00      	nop
 80054a0:	20000084 	.word	0x20000084

080054a4 <__sread>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	460c      	mov	r4, r1
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	f000 f868 	bl	8005580 <_read_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	bfab      	itete	ge
 80054b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054b6:	89a3      	ldrhlt	r3, [r4, #12]
 80054b8:	181b      	addge	r3, r3, r0
 80054ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054be:	bfac      	ite	ge
 80054c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c2:	81a3      	strhlt	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__swrite>:
 80054c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	461f      	mov	r7, r3
 80054cc:	898b      	ldrh	r3, [r1, #12]
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4616      	mov	r6, r2
 80054d6:	d505      	bpl.n	80054e4 <__swrite+0x1e>
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	2302      	movs	r3, #2
 80054de:	2200      	movs	r2, #0
 80054e0:	f000 f83c 	bl	800555c <_lseek_r>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	4632      	mov	r2, r6
 80054f2:	463b      	mov	r3, r7
 80054f4:	4628      	mov	r0, r5
 80054f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	f000 b853 	b.w	80055a4 <_write_r>

080054fe <__sseek>:
 80054fe:	b510      	push	{r4, lr}
 8005500:	460c      	mov	r4, r1
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 f829 	bl	800555c <_lseek_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	bf15      	itete	ne
 8005510:	6560      	strne	r0, [r4, #84]	; 0x54
 8005512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551a:	81a3      	strheq	r3, [r4, #12]
 800551c:	bf18      	it	ne
 800551e:	81a3      	strhne	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__sclose>:
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 b809 	b.w	800553c <_close_r>

0800552a <memset>:
 800552a:	4402      	add	r2, r0
 800552c:	4603      	mov	r3, r0
 800552e:	4293      	cmp	r3, r2
 8005530:	d100      	bne.n	8005534 <memset+0xa>
 8005532:	4770      	bx	lr
 8005534:	f803 1b01 	strb.w	r1, [r3], #1
 8005538:	e7f9      	b.n	800552e <memset+0x4>
	...

0800553c <_close_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_close_r+0x1c>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	602b      	str	r3, [r5, #0]
 8005548:	f7fb fef3 	bl	8001332 <_close>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_close_r+0x1a>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_close_r+0x1a>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	200006e8 	.word	0x200006e8

0800555c <_lseek_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	; (800557c <_lseek_r+0x20>)
 8005560:	4604      	mov	r4, r0
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	2200      	movs	r2, #0
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7fb ff08 	bl	8001380 <_lseek>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_lseek_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_lseek_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	200006e8 	.word	0x200006e8

08005580 <_read_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	; (80055a0 <_read_r+0x20>)
 8005584:	4604      	mov	r4, r0
 8005586:	4608      	mov	r0, r1
 8005588:	4611      	mov	r1, r2
 800558a:	2200      	movs	r2, #0
 800558c:	602a      	str	r2, [r5, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	f7fb feb2 	bl	80012f8 <_read>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_read_r+0x1e>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_read_r+0x1e>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	200006e8 	.word	0x200006e8

080055a4 <_write_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d07      	ldr	r5, [pc, #28]	; (80055c4 <_write_r+0x20>)
 80055a8:	4604      	mov	r4, r0
 80055aa:	4608      	mov	r0, r1
 80055ac:	4611      	mov	r1, r2
 80055ae:	2200      	movs	r2, #0
 80055b0:	602a      	str	r2, [r5, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7fb f9b6 	bl	8000924 <_write>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_write_r+0x1e>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_write_r+0x1e>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	200006e8 	.word	0x200006e8

080055c8 <__errno>:
 80055c8:	4b01      	ldr	r3, [pc, #4]	; (80055d0 <__errno+0x8>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000084 	.word	0x20000084

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4d0d      	ldr	r5, [pc, #52]	; (800560c <__libc_init_array+0x38>)
 80055d8:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <__libc_init_array+0x3c>)
 80055da:	1b64      	subs	r4, r4, r5
 80055dc:	10a4      	asrs	r4, r4, #2
 80055de:	2600      	movs	r6, #0
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	4d0b      	ldr	r5, [pc, #44]	; (8005614 <__libc_init_array+0x40>)
 80055e6:	4c0c      	ldr	r4, [pc, #48]	; (8005618 <__libc_init_array+0x44>)
 80055e8:	f000 ff78 	bl	80064dc <_init>
 80055ec:	1b64      	subs	r4, r4, r5
 80055ee:	10a4      	asrs	r4, r4, #2
 80055f0:	2600      	movs	r6, #0
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	f855 3b04 	ldr.w	r3, [r5], #4
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	08008e20 	.word	0x08008e20
 8005610:	08008e20 	.word	0x08008e20
 8005614:	08008e20 	.word	0x08008e20
 8005618:	08008e24 	.word	0x08008e24

0800561c <__retarget_lock_init_recursive>:
 800561c:	4770      	bx	lr

0800561e <__retarget_lock_acquire_recursive>:
 800561e:	4770      	bx	lr

08005620 <__retarget_lock_release_recursive>:
 8005620:	4770      	bx	lr

08005622 <memcpy>:
 8005622:	440a      	add	r2, r1
 8005624:	4291      	cmp	r1, r2
 8005626:	f100 33ff 	add.w	r3, r0, #4294967295
 800562a:	d100      	bne.n	800562e <memcpy+0xc>
 800562c:	4770      	bx	lr
 800562e:	b510      	push	{r4, lr}
 8005630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005638:	4291      	cmp	r1, r2
 800563a:	d1f9      	bne.n	8005630 <memcpy+0xe>
 800563c:	bd10      	pop	{r4, pc}
	...

08005640 <_free_r>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	2900      	cmp	r1, #0
 8005644:	d044      	beq.n	80056d0 <_free_r+0x90>
 8005646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564a:	9001      	str	r0, [sp, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f1a1 0404 	sub.w	r4, r1, #4
 8005652:	bfb8      	it	lt
 8005654:	18e4      	addlt	r4, r4, r3
 8005656:	f000 f8df 	bl	8005818 <__malloc_lock>
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <_free_r+0x94>)
 800565c:	9801      	ldr	r0, [sp, #4]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	b933      	cbnz	r3, 8005670 <_free_r+0x30>
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6014      	str	r4, [r2, #0]
 8005666:	b003      	add	sp, #12
 8005668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800566c:	f000 b8da 	b.w	8005824 <__malloc_unlock>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d908      	bls.n	8005686 <_free_r+0x46>
 8005674:	6825      	ldr	r5, [r4, #0]
 8005676:	1961      	adds	r1, r4, r5
 8005678:	428b      	cmp	r3, r1
 800567a:	bf01      	itttt	eq
 800567c:	6819      	ldreq	r1, [r3, #0]
 800567e:	685b      	ldreq	r3, [r3, #4]
 8005680:	1949      	addeq	r1, r1, r5
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	e7ed      	b.n	8005662 <_free_r+0x22>
 8005686:	461a      	mov	r2, r3
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b10b      	cbz	r3, 8005690 <_free_r+0x50>
 800568c:	42a3      	cmp	r3, r4
 800568e:	d9fa      	bls.n	8005686 <_free_r+0x46>
 8005690:	6811      	ldr	r1, [r2, #0]
 8005692:	1855      	adds	r5, r2, r1
 8005694:	42a5      	cmp	r5, r4
 8005696:	d10b      	bne.n	80056b0 <_free_r+0x70>
 8005698:	6824      	ldr	r4, [r4, #0]
 800569a:	4421      	add	r1, r4
 800569c:	1854      	adds	r4, r2, r1
 800569e:	42a3      	cmp	r3, r4
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	d1e0      	bne.n	8005666 <_free_r+0x26>
 80056a4:	681c      	ldr	r4, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	440c      	add	r4, r1
 80056ac:	6014      	str	r4, [r2, #0]
 80056ae:	e7da      	b.n	8005666 <_free_r+0x26>
 80056b0:	d902      	bls.n	80056b8 <_free_r+0x78>
 80056b2:	230c      	movs	r3, #12
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	e7d6      	b.n	8005666 <_free_r+0x26>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf04      	itt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	bf04      	itt	eq
 80056c8:	1949      	addeq	r1, r1, r5
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	6054      	str	r4, [r2, #4]
 80056ce:	e7ca      	b.n	8005666 <_free_r+0x26>
 80056d0:	b003      	add	sp, #12
 80056d2:	bd30      	pop	{r4, r5, pc}
 80056d4:	200006f0 	.word	0x200006f0

080056d8 <sbrk_aligned>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4e0e      	ldr	r6, [pc, #56]	; (8005714 <sbrk_aligned+0x3c>)
 80056dc:	460c      	mov	r4, r1
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	4605      	mov	r5, r0
 80056e2:	b911      	cbnz	r1, 80056ea <sbrk_aligned+0x12>
 80056e4:	f000 fe2e 	bl	8006344 <_sbrk_r>
 80056e8:	6030      	str	r0, [r6, #0]
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 fe29 	bl	8006344 <_sbrk_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d00a      	beq.n	800570c <sbrk_aligned+0x34>
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d007      	beq.n	8005710 <sbrk_aligned+0x38>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fe1e 	bl	8006344 <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d101      	bne.n	8005710 <sbrk_aligned+0x38>
 800570c:	f04f 34ff 	mov.w	r4, #4294967295
 8005710:	4620      	mov	r0, r4
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	200006f4 	.word	0x200006f4

08005718 <_malloc_r>:
 8005718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800571c:	1ccd      	adds	r5, r1, #3
 800571e:	f025 0503 	bic.w	r5, r5, #3
 8005722:	3508      	adds	r5, #8
 8005724:	2d0c      	cmp	r5, #12
 8005726:	bf38      	it	cc
 8005728:	250c      	movcc	r5, #12
 800572a:	2d00      	cmp	r5, #0
 800572c:	4607      	mov	r7, r0
 800572e:	db01      	blt.n	8005734 <_malloc_r+0x1c>
 8005730:	42a9      	cmp	r1, r5
 8005732:	d905      	bls.n	8005740 <_malloc_r+0x28>
 8005734:	230c      	movs	r3, #12
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	2600      	movs	r6, #0
 800573a:	4630      	mov	r0, r6
 800573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005740:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005814 <_malloc_r+0xfc>
 8005744:	f000 f868 	bl	8005818 <__malloc_lock>
 8005748:	f8d8 3000 	ldr.w	r3, [r8]
 800574c:	461c      	mov	r4, r3
 800574e:	bb5c      	cbnz	r4, 80057a8 <_malloc_r+0x90>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ffc0 	bl	80056d8 <sbrk_aligned>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	4604      	mov	r4, r0
 800575c:	d155      	bne.n	800580a <_malloc_r+0xf2>
 800575e:	f8d8 4000 	ldr.w	r4, [r8]
 8005762:	4626      	mov	r6, r4
 8005764:	2e00      	cmp	r6, #0
 8005766:	d145      	bne.n	80057f4 <_malloc_r+0xdc>
 8005768:	2c00      	cmp	r4, #0
 800576a:	d048      	beq.n	80057fe <_malloc_r+0xe6>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	4631      	mov	r1, r6
 8005770:	4638      	mov	r0, r7
 8005772:	eb04 0903 	add.w	r9, r4, r3
 8005776:	f000 fde5 	bl	8006344 <_sbrk_r>
 800577a:	4581      	cmp	r9, r0
 800577c:	d13f      	bne.n	80057fe <_malloc_r+0xe6>
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	1a6d      	subs	r5, r5, r1
 8005782:	4629      	mov	r1, r5
 8005784:	4638      	mov	r0, r7
 8005786:	f7ff ffa7 	bl	80056d8 <sbrk_aligned>
 800578a:	3001      	adds	r0, #1
 800578c:	d037      	beq.n	80057fe <_malloc_r+0xe6>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	442b      	add	r3, r5
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	f8d8 3000 	ldr.w	r3, [r8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d038      	beq.n	800580e <_malloc_r+0xf6>
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	42a2      	cmp	r2, r4
 80057a0:	d12b      	bne.n	80057fa <_malloc_r+0xe2>
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	e00f      	b.n	80057c8 <_malloc_r+0xb0>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	1b52      	subs	r2, r2, r5
 80057ac:	d41f      	bmi.n	80057ee <_malloc_r+0xd6>
 80057ae:	2a0b      	cmp	r2, #11
 80057b0:	d917      	bls.n	80057e2 <_malloc_r+0xca>
 80057b2:	1961      	adds	r1, r4, r5
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	6059      	strne	r1, [r3, #4]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	bf08      	it	eq
 80057c0:	f8c8 1000 	streq.w	r1, [r8]
 80057c4:	5162      	str	r2, [r4, r5]
 80057c6:	604b      	str	r3, [r1, #4]
 80057c8:	4638      	mov	r0, r7
 80057ca:	f104 060b 	add.w	r6, r4, #11
 80057ce:	f000 f829 	bl	8005824 <__malloc_unlock>
 80057d2:	f026 0607 	bic.w	r6, r6, #7
 80057d6:	1d23      	adds	r3, r4, #4
 80057d8:	1af2      	subs	r2, r6, r3
 80057da:	d0ae      	beq.n	800573a <_malloc_r+0x22>
 80057dc:	1b9b      	subs	r3, r3, r6
 80057de:	50a3      	str	r3, [r4, r2]
 80057e0:	e7ab      	b.n	800573a <_malloc_r+0x22>
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	6862      	ldr	r2, [r4, #4]
 80057e6:	d1dd      	bne.n	80057a4 <_malloc_r+0x8c>
 80057e8:	f8c8 2000 	str.w	r2, [r8]
 80057ec:	e7ec      	b.n	80057c8 <_malloc_r+0xb0>
 80057ee:	4623      	mov	r3, r4
 80057f0:	6864      	ldr	r4, [r4, #4]
 80057f2:	e7ac      	b.n	800574e <_malloc_r+0x36>
 80057f4:	4634      	mov	r4, r6
 80057f6:	6876      	ldr	r6, [r6, #4]
 80057f8:	e7b4      	b.n	8005764 <_malloc_r+0x4c>
 80057fa:	4613      	mov	r3, r2
 80057fc:	e7cc      	b.n	8005798 <_malloc_r+0x80>
 80057fe:	230c      	movs	r3, #12
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4638      	mov	r0, r7
 8005804:	f000 f80e 	bl	8005824 <__malloc_unlock>
 8005808:	e797      	b.n	800573a <_malloc_r+0x22>
 800580a:	6025      	str	r5, [r4, #0]
 800580c:	e7dc      	b.n	80057c8 <_malloc_r+0xb0>
 800580e:	605b      	str	r3, [r3, #4]
 8005810:	deff      	udf	#255	; 0xff
 8005812:	bf00      	nop
 8005814:	200006f0 	.word	0x200006f0

08005818 <__malloc_lock>:
 8005818:	4801      	ldr	r0, [pc, #4]	; (8005820 <__malloc_lock+0x8>)
 800581a:	f7ff bf00 	b.w	800561e <__retarget_lock_acquire_recursive>
 800581e:	bf00      	nop
 8005820:	200006ec 	.word	0x200006ec

08005824 <__malloc_unlock>:
 8005824:	4801      	ldr	r0, [pc, #4]	; (800582c <__malloc_unlock+0x8>)
 8005826:	f7ff befb 	b.w	8005620 <__retarget_lock_release_recursive>
 800582a:	bf00      	nop
 800582c:	200006ec 	.word	0x200006ec

08005830 <__ssputs_r>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	688e      	ldr	r6, [r1, #8]
 8005836:	461f      	mov	r7, r3
 8005838:	42be      	cmp	r6, r7
 800583a:	680b      	ldr	r3, [r1, #0]
 800583c:	4682      	mov	sl, r0
 800583e:	460c      	mov	r4, r1
 8005840:	4690      	mov	r8, r2
 8005842:	d82c      	bhi.n	800589e <__ssputs_r+0x6e>
 8005844:	898a      	ldrh	r2, [r1, #12]
 8005846:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800584a:	d026      	beq.n	800589a <__ssputs_r+0x6a>
 800584c:	6965      	ldr	r5, [r4, #20]
 800584e:	6909      	ldr	r1, [r1, #16]
 8005850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005854:	eba3 0901 	sub.w	r9, r3, r1
 8005858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800585c:	1c7b      	adds	r3, r7, #1
 800585e:	444b      	add	r3, r9
 8005860:	106d      	asrs	r5, r5, #1
 8005862:	429d      	cmp	r5, r3
 8005864:	bf38      	it	cc
 8005866:	461d      	movcc	r5, r3
 8005868:	0553      	lsls	r3, r2, #21
 800586a:	d527      	bpl.n	80058bc <__ssputs_r+0x8c>
 800586c:	4629      	mov	r1, r5
 800586e:	f7ff ff53 	bl	8005718 <_malloc_r>
 8005872:	4606      	mov	r6, r0
 8005874:	b360      	cbz	r0, 80058d0 <__ssputs_r+0xa0>
 8005876:	6921      	ldr	r1, [r4, #16]
 8005878:	464a      	mov	r2, r9
 800587a:	f7ff fed2 	bl	8005622 <memcpy>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	6126      	str	r6, [r4, #16]
 800588c:	6165      	str	r5, [r4, #20]
 800588e:	444e      	add	r6, r9
 8005890:	eba5 0509 	sub.w	r5, r5, r9
 8005894:	6026      	str	r6, [r4, #0]
 8005896:	60a5      	str	r5, [r4, #8]
 8005898:	463e      	mov	r6, r7
 800589a:	42be      	cmp	r6, r7
 800589c:	d900      	bls.n	80058a0 <__ssputs_r+0x70>
 800589e:	463e      	mov	r6, r7
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	4632      	mov	r2, r6
 80058a4:	4641      	mov	r1, r8
 80058a6:	f000 fd33 	bl	8006310 <memmove>
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	1b9b      	subs	r3, r3, r6
 80058ae:	60a3      	str	r3, [r4, #8]
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	4433      	add	r3, r6
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	2000      	movs	r0, #0
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	462a      	mov	r2, r5
 80058be:	f000 fd51 	bl	8006364 <_realloc_r>
 80058c2:	4606      	mov	r6, r0
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d1e0      	bne.n	800588a <__ssputs_r+0x5a>
 80058c8:	6921      	ldr	r1, [r4, #16]
 80058ca:	4650      	mov	r0, sl
 80058cc:	f7ff feb8 	bl	8005640 <_free_r>
 80058d0:	230c      	movs	r3, #12
 80058d2:	f8ca 3000 	str.w	r3, [sl]
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	f04f 30ff 	mov.w	r0, #4294967295
 80058e2:	e7e9      	b.n	80058b8 <__ssputs_r+0x88>

080058e4 <_svfiprintf_r>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	4698      	mov	r8, r3
 80058ea:	898b      	ldrh	r3, [r1, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	b09d      	sub	sp, #116	; 0x74
 80058f0:	4607      	mov	r7, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	d50e      	bpl.n	8005916 <_svfiprintf_r+0x32>
 80058f8:	690b      	ldr	r3, [r1, #16]
 80058fa:	b963      	cbnz	r3, 8005916 <_svfiprintf_r+0x32>
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	f7ff ff0b 	bl	8005718 <_malloc_r>
 8005902:	6028      	str	r0, [r5, #0]
 8005904:	6128      	str	r0, [r5, #16]
 8005906:	b920      	cbnz	r0, 8005912 <_svfiprintf_r+0x2e>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e0d0      	b.n	8005ab4 <_svfiprintf_r+0x1d0>
 8005912:	2340      	movs	r3, #64	; 0x40
 8005914:	616b      	str	r3, [r5, #20]
 8005916:	2300      	movs	r3, #0
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	2320      	movs	r3, #32
 800591c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005920:	f8cd 800c 	str.w	r8, [sp, #12]
 8005924:	2330      	movs	r3, #48	; 0x30
 8005926:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005acc <_svfiprintf_r+0x1e8>
 800592a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800592e:	f04f 0901 	mov.w	r9, #1
 8005932:	4623      	mov	r3, r4
 8005934:	469a      	mov	sl, r3
 8005936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593a:	b10a      	cbz	r2, 8005940 <_svfiprintf_r+0x5c>
 800593c:	2a25      	cmp	r2, #37	; 0x25
 800593e:	d1f9      	bne.n	8005934 <_svfiprintf_r+0x50>
 8005940:	ebba 0b04 	subs.w	fp, sl, r4
 8005944:	d00b      	beq.n	800595e <_svfiprintf_r+0x7a>
 8005946:	465b      	mov	r3, fp
 8005948:	4622      	mov	r2, r4
 800594a:	4629      	mov	r1, r5
 800594c:	4638      	mov	r0, r7
 800594e:	f7ff ff6f 	bl	8005830 <__ssputs_r>
 8005952:	3001      	adds	r0, #1
 8005954:	f000 80a9 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 8005958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800595a:	445a      	add	r2, fp
 800595c:	9209      	str	r2, [sp, #36]	; 0x24
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80a1 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 8005968:	2300      	movs	r3, #0
 800596a:	f04f 32ff 	mov.w	r2, #4294967295
 800596e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005972:	f10a 0a01 	add.w	sl, sl, #1
 8005976:	9304      	str	r3, [sp, #16]
 8005978:	9307      	str	r3, [sp, #28]
 800597a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800597e:	931a      	str	r3, [sp, #104]	; 0x68
 8005980:	4654      	mov	r4, sl
 8005982:	2205      	movs	r2, #5
 8005984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005988:	4850      	ldr	r0, [pc, #320]	; (8005acc <_svfiprintf_r+0x1e8>)
 800598a:	f7fa fc21 	bl	80001d0 <memchr>
 800598e:	9a04      	ldr	r2, [sp, #16]
 8005990:	b9d8      	cbnz	r0, 80059ca <_svfiprintf_r+0xe6>
 8005992:	06d0      	lsls	r0, r2, #27
 8005994:	bf44      	itt	mi
 8005996:	2320      	movmi	r3, #32
 8005998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599c:	0711      	lsls	r1, r2, #28
 800599e:	bf44      	itt	mi
 80059a0:	232b      	movmi	r3, #43	; 0x2b
 80059a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059a6:	f89a 3000 	ldrb.w	r3, [sl]
 80059aa:	2b2a      	cmp	r3, #42	; 0x2a
 80059ac:	d015      	beq.n	80059da <_svfiprintf_r+0xf6>
 80059ae:	9a07      	ldr	r2, [sp, #28]
 80059b0:	4654      	mov	r4, sl
 80059b2:	2000      	movs	r0, #0
 80059b4:	f04f 0c0a 	mov.w	ip, #10
 80059b8:	4621      	mov	r1, r4
 80059ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059be:	3b30      	subs	r3, #48	; 0x30
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	d94d      	bls.n	8005a60 <_svfiprintf_r+0x17c>
 80059c4:	b1b0      	cbz	r0, 80059f4 <_svfiprintf_r+0x110>
 80059c6:	9207      	str	r2, [sp, #28]
 80059c8:	e014      	b.n	80059f4 <_svfiprintf_r+0x110>
 80059ca:	eba0 0308 	sub.w	r3, r0, r8
 80059ce:	fa09 f303 	lsl.w	r3, r9, r3
 80059d2:	4313      	orrs	r3, r2
 80059d4:	9304      	str	r3, [sp, #16]
 80059d6:	46a2      	mov	sl, r4
 80059d8:	e7d2      	b.n	8005980 <_svfiprintf_r+0x9c>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	1d19      	adds	r1, r3, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	9103      	str	r1, [sp, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	bfbb      	ittet	lt
 80059e6:	425b      	neglt	r3, r3
 80059e8:	f042 0202 	orrlt.w	r2, r2, #2
 80059ec:	9307      	strge	r3, [sp, #28]
 80059ee:	9307      	strlt	r3, [sp, #28]
 80059f0:	bfb8      	it	lt
 80059f2:	9204      	strlt	r2, [sp, #16]
 80059f4:	7823      	ldrb	r3, [r4, #0]
 80059f6:	2b2e      	cmp	r3, #46	; 0x2e
 80059f8:	d10c      	bne.n	8005a14 <_svfiprintf_r+0x130>
 80059fa:	7863      	ldrb	r3, [r4, #1]
 80059fc:	2b2a      	cmp	r3, #42	; 0x2a
 80059fe:	d134      	bne.n	8005a6a <_svfiprintf_r+0x186>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	9203      	str	r2, [sp, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bfb8      	it	lt
 8005a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a10:	3402      	adds	r4, #2
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005adc <_svfiprintf_r+0x1f8>
 8005a18:	7821      	ldrb	r1, [r4, #0]
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	f7fa fbd7 	bl	80001d0 <memchr>
 8005a22:	b138      	cbz	r0, 8005a34 <_svfiprintf_r+0x150>
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	eba0 000a 	sub.w	r0, r0, sl
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	4082      	lsls	r2, r0
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	3401      	adds	r4, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	4825      	ldr	r0, [pc, #148]	; (8005ad0 <_svfiprintf_r+0x1ec>)
 8005a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a3e:	2206      	movs	r2, #6
 8005a40:	f7fa fbc6 	bl	80001d0 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d038      	beq.n	8005aba <_svfiprintf_r+0x1d6>
 8005a48:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <_svfiprintf_r+0x1f0>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_svfiprintf_r+0x1b0>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	4433      	add	r3, r6
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	e768      	b.n	8005932 <_svfiprintf_r+0x4e>
 8005a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a64:	460c      	mov	r4, r1
 8005a66:	2001      	movs	r0, #1
 8005a68:	e7a6      	b.n	80059b8 <_svfiprintf_r+0xd4>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	3401      	adds	r4, #1
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4620      	mov	r0, r4
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	; 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_svfiprintf_r+0x1a6>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c6      	beq.n	8005a14 <_svfiprintf_r+0x130>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c4      	b.n	8005a14 <_svfiprintf_r+0x130>
 8005a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8e:	4604      	mov	r4, r0
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7f0      	b.n	8005a76 <_svfiprintf_r+0x192>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <_svfiprintf_r+0x1f4>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	1c42      	adds	r2, r0, #1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	d1d6      	bne.n	8005a58 <_svfiprintf_r+0x174>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	065b      	lsls	r3, r3, #25
 8005aae:	f53f af2d 	bmi.w	800590c <_svfiprintf_r+0x28>
 8005ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab4:	b01d      	add	sp, #116	; 0x74
 8005ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aba:	ab03      	add	r3, sp, #12
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	462a      	mov	r2, r5
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <_svfiprintf_r+0x1f4>)
 8005ac2:	a904      	add	r1, sp, #16
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	f000 f9bd 	bl	8005e44 <_printf_i>
 8005aca:	e7eb      	b.n	8005aa4 <_svfiprintf_r+0x1c0>
 8005acc:	08008de4 	.word	0x08008de4
 8005ad0:	08008dee 	.word	0x08008dee
 8005ad4:	00000000 	.word	0x00000000
 8005ad8:	08005831 	.word	0x08005831
 8005adc:	08008dea 	.word	0x08008dea

08005ae0 <__sfputc_r>:
 8005ae0:	6893      	ldr	r3, [r2, #8]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	b410      	push	{r4}
 8005ae8:	6093      	str	r3, [r2, #8]
 8005aea:	da08      	bge.n	8005afe <__sfputc_r+0x1e>
 8005aec:	6994      	ldr	r4, [r2, #24]
 8005aee:	42a3      	cmp	r3, r4
 8005af0:	db01      	blt.n	8005af6 <__sfputc_r+0x16>
 8005af2:	290a      	cmp	r1, #10
 8005af4:	d103      	bne.n	8005afe <__sfputc_r+0x1e>
 8005af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005afa:	f000 bb73 	b.w	80061e4 <__swbuf_r>
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	1c58      	adds	r0, r3, #1
 8005b02:	6010      	str	r0, [r2, #0]
 8005b04:	7019      	strb	r1, [r3, #0]
 8005b06:	4608      	mov	r0, r1
 8005b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <__sfputs_r>:
 8005b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	18d5      	adds	r5, r2, r3
 8005b18:	42ac      	cmp	r4, r5
 8005b1a:	d101      	bne.n	8005b20 <__sfputs_r+0x12>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e007      	b.n	8005b30 <__sfputs_r+0x22>
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	463a      	mov	r2, r7
 8005b26:	4630      	mov	r0, r6
 8005b28:	f7ff ffda 	bl	8005ae0 <__sfputc_r>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d1f3      	bne.n	8005b18 <__sfputs_r+0xa>
 8005b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b34 <_vfiprintf_r>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	460d      	mov	r5, r1
 8005b3a:	b09d      	sub	sp, #116	; 0x74
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	4698      	mov	r8, r3
 8005b40:	4606      	mov	r6, r0
 8005b42:	b118      	cbz	r0, 8005b4c <_vfiprintf_r+0x18>
 8005b44:	6a03      	ldr	r3, [r0, #32]
 8005b46:	b90b      	cbnz	r3, 8005b4c <_vfiprintf_r+0x18>
 8005b48:	f7ff fc30 	bl	80053ac <__sinit>
 8005b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4e:	07d9      	lsls	r1, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_vfiprintf_r+0x2a>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_vfiprintf_r+0x2a>
 8005b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b5a:	f7ff fd60 	bl	800561e <__retarget_lock_acquire_recursive>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	d501      	bpl.n	8005b68 <_vfiprintf_r+0x34>
 8005b64:	692b      	ldr	r3, [r5, #16]
 8005b66:	b99b      	cbnz	r3, 8005b90 <_vfiprintf_r+0x5c>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f000 fb78 	bl	8006260 <__swsetup_r>
 8005b70:	b170      	cbz	r0, 8005b90 <_vfiprintf_r+0x5c>
 8005b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b74:	07dc      	lsls	r4, r3, #31
 8005b76:	d504      	bpl.n	8005b82 <_vfiprintf_r+0x4e>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b01d      	add	sp, #116	; 0x74
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	0598      	lsls	r0, r3, #22
 8005b86:	d4f7      	bmi.n	8005b78 <_vfiprintf_r+0x44>
 8005b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8a:	f7ff fd49 	bl	8005620 <__retarget_lock_release_recursive>
 8005b8e:	e7f3      	b.n	8005b78 <_vfiprintf_r+0x44>
 8005b90:	2300      	movs	r3, #0
 8005b92:	9309      	str	r3, [sp, #36]	; 0x24
 8005b94:	2320      	movs	r3, #32
 8005b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b9e:	2330      	movs	r3, #48	; 0x30
 8005ba0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005d54 <_vfiprintf_r+0x220>
 8005ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ba8:	f04f 0901 	mov.w	r9, #1
 8005bac:	4623      	mov	r3, r4
 8005bae:	469a      	mov	sl, r3
 8005bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb4:	b10a      	cbz	r2, 8005bba <_vfiprintf_r+0x86>
 8005bb6:	2a25      	cmp	r2, #37	; 0x25
 8005bb8:	d1f9      	bne.n	8005bae <_vfiprintf_r+0x7a>
 8005bba:	ebba 0b04 	subs.w	fp, sl, r4
 8005bbe:	d00b      	beq.n	8005bd8 <_vfiprintf_r+0xa4>
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ffa1 	bl	8005b0e <__sfputs_r>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f000 80a9 	beq.w	8005d24 <_vfiprintf_r+0x1f0>
 8005bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd4:	445a      	add	r2, fp
 8005bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80a1 	beq.w	8005d24 <_vfiprintf_r+0x1f0>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bec:	f10a 0a01 	add.w	sl, sl, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c02:	4854      	ldr	r0, [pc, #336]	; (8005d54 <_vfiprintf_r+0x220>)
 8005c04:	f7fa fae4 	bl	80001d0 <memchr>
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	b9d8      	cbnz	r0, 8005c44 <_vfiprintf_r+0x110>
 8005c0c:	06d1      	lsls	r1, r2, #27
 8005c0e:	bf44      	itt	mi
 8005c10:	2320      	movmi	r3, #32
 8005c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c16:	0713      	lsls	r3, r2, #28
 8005c18:	bf44      	itt	mi
 8005c1a:	232b      	movmi	r3, #43	; 0x2b
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c20:	f89a 3000 	ldrb.w	r3, [sl]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d015      	beq.n	8005c54 <_vfiprintf_r+0x120>
 8005c28:	9a07      	ldr	r2, [sp, #28]
 8005c2a:	4654      	mov	r4, sl
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f04f 0c0a 	mov.w	ip, #10
 8005c32:	4621      	mov	r1, r4
 8005c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c38:	3b30      	subs	r3, #48	; 0x30
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	d94d      	bls.n	8005cda <_vfiprintf_r+0x1a6>
 8005c3e:	b1b0      	cbz	r0, 8005c6e <_vfiprintf_r+0x13a>
 8005c40:	9207      	str	r2, [sp, #28]
 8005c42:	e014      	b.n	8005c6e <_vfiprintf_r+0x13a>
 8005c44:	eba0 0308 	sub.w	r3, r0, r8
 8005c48:	fa09 f303 	lsl.w	r3, r9, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	9304      	str	r3, [sp, #16]
 8005c50:	46a2      	mov	sl, r4
 8005c52:	e7d2      	b.n	8005bfa <_vfiprintf_r+0xc6>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	1d19      	adds	r1, r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	9103      	str	r1, [sp, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbb      	ittet	lt
 8005c60:	425b      	neglt	r3, r3
 8005c62:	f042 0202 	orrlt.w	r2, r2, #2
 8005c66:	9307      	strge	r3, [sp, #28]
 8005c68:	9307      	strlt	r3, [sp, #28]
 8005c6a:	bfb8      	it	lt
 8005c6c:	9204      	strlt	r2, [sp, #16]
 8005c6e:	7823      	ldrb	r3, [r4, #0]
 8005c70:	2b2e      	cmp	r3, #46	; 0x2e
 8005c72:	d10c      	bne.n	8005c8e <_vfiprintf_r+0x15a>
 8005c74:	7863      	ldrb	r3, [r4, #1]
 8005c76:	2b2a      	cmp	r3, #42	; 0x2a
 8005c78:	d134      	bne.n	8005ce4 <_vfiprintf_r+0x1b0>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	9203      	str	r2, [sp, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bfb8      	it	lt
 8005c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c8a:	3402      	adds	r4, #2
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d64 <_vfiprintf_r+0x230>
 8005c92:	7821      	ldrb	r1, [r4, #0]
 8005c94:	2203      	movs	r2, #3
 8005c96:	4650      	mov	r0, sl
 8005c98:	f7fa fa9a 	bl	80001d0 <memchr>
 8005c9c:	b138      	cbz	r0, 8005cae <_vfiprintf_r+0x17a>
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	eba0 000a 	sub.w	r0, r0, sl
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	4082      	lsls	r2, r0
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	3401      	adds	r4, #1
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb2:	4829      	ldr	r0, [pc, #164]	; (8005d58 <_vfiprintf_r+0x224>)
 8005cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cb8:	2206      	movs	r2, #6
 8005cba:	f7fa fa89 	bl	80001d0 <memchr>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d03f      	beq.n	8005d42 <_vfiprintf_r+0x20e>
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <_vfiprintf_r+0x228>)
 8005cc4:	bb1b      	cbnz	r3, 8005d0e <_vfiprintf_r+0x1da>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	3307      	adds	r3, #7
 8005cca:	f023 0307 	bic.w	r3, r3, #7
 8005cce:	3308      	adds	r3, #8
 8005cd0:	9303      	str	r3, [sp, #12]
 8005cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd4:	443b      	add	r3, r7
 8005cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd8:	e768      	b.n	8005bac <_vfiprintf_r+0x78>
 8005cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cde:	460c      	mov	r4, r1
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	e7a6      	b.n	8005c32 <_vfiprintf_r+0xfe>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	3401      	adds	r4, #1
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	4619      	mov	r1, r3
 8005cec:	f04f 0c0a 	mov.w	ip, #10
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf6:	3a30      	subs	r2, #48	; 0x30
 8005cf8:	2a09      	cmp	r2, #9
 8005cfa:	d903      	bls.n	8005d04 <_vfiprintf_r+0x1d0>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0c6      	beq.n	8005c8e <_vfiprintf_r+0x15a>
 8005d00:	9105      	str	r1, [sp, #20]
 8005d02:	e7c4      	b.n	8005c8e <_vfiprintf_r+0x15a>
 8005d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d08:	4604      	mov	r4, r0
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7f0      	b.n	8005cf0 <_vfiprintf_r+0x1bc>
 8005d0e:	ab03      	add	r3, sp, #12
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	462a      	mov	r2, r5
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <_vfiprintf_r+0x22c>)
 8005d16:	a904      	add	r1, sp, #16
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f3af 8000 	nop.w
 8005d1e:	4607      	mov	r7, r0
 8005d20:	1c78      	adds	r0, r7, #1
 8005d22:	d1d6      	bne.n	8005cd2 <_vfiprintf_r+0x19e>
 8005d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d26:	07d9      	lsls	r1, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_vfiprintf_r+0x202>
 8005d2a:	89ab      	ldrh	r3, [r5, #12]
 8005d2c:	059a      	lsls	r2, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_vfiprintf_r+0x202>
 8005d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d32:	f7ff fc75 	bl	8005620 <__retarget_lock_release_recursive>
 8005d36:	89ab      	ldrh	r3, [r5, #12]
 8005d38:	065b      	lsls	r3, r3, #25
 8005d3a:	f53f af1d 	bmi.w	8005b78 <_vfiprintf_r+0x44>
 8005d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d40:	e71c      	b.n	8005b7c <_vfiprintf_r+0x48>
 8005d42:	ab03      	add	r3, sp, #12
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	462a      	mov	r2, r5
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <_vfiprintf_r+0x22c>)
 8005d4a:	a904      	add	r1, sp, #16
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 f879 	bl	8005e44 <_printf_i>
 8005d52:	e7e4      	b.n	8005d1e <_vfiprintf_r+0x1ea>
 8005d54:	08008de4 	.word	0x08008de4
 8005d58:	08008dee 	.word	0x08008dee
 8005d5c:	00000000 	.word	0x00000000
 8005d60:	08005b0f 	.word	0x08005b0f
 8005d64:	08008dea 	.word	0x08008dea

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4699      	mov	r9, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db4:	1e13      	subs	r3, r2, #0
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf02      	ittt	eq
 8005dda:	68e5      	ldreq	r5, [r4, #12]
 8005ddc:	6833      	ldreq	r3, [r6, #0]
 8005dde:	1aed      	subeq	r5, r5, r3
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4649      	mov	r1, r9
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c0      	blx	r8
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	7e0f      	ldrb	r7, [r1, #24]
 8005e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e4c:	2f78      	cmp	r7, #120	; 0x78
 8005e4e:	4691      	mov	r9, r2
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	469a      	mov	sl, r3
 8005e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	; 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d4 	beq.w	800600e <_printf_i+0x1ca>
 8005e66:	2f58      	cmp	r7, #88	; 0x58
 8005e68:	f000 80c0 	beq.w	8005fec <_printf_i+0x1a8>
 8005e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a101      	add	r1, pc, #4	; (adr r1, 8005e84 <_printf_i+0x40>)
 8005e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ff5 	.word	0x08005ff5
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005faf 	.word	0x08005faf
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	08006017 	.word	0x08006017
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fb7 	.word	0x08005fb7
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	602a      	str	r2, [r5, #0]
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e09f      	b.n	8006030 <_printf_i+0x1ec>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	0607      	lsls	r7, r0, #24
 8005ef6:	f103 0104 	add.w	r1, r3, #4
 8005efa:	6029      	str	r1, [r5, #0]
 8005efc:	d501      	bpl.n	8005f02 <_printf_i+0xbe>
 8005efe:	681e      	ldr	r6, [r3, #0]
 8005f00:	e003      	b.n	8005f0a <_printf_i+0xc6>
 8005f02:	0646      	lsls	r6, r0, #25
 8005f04:	d5fb      	bpl.n	8005efe <_printf_i+0xba>
 8005f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	da03      	bge.n	8005f16 <_printf_i+0xd2>
 8005f0e:	232d      	movs	r3, #45	; 0x2d
 8005f10:	4276      	negs	r6, r6
 8005f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f16:	485a      	ldr	r0, [pc, #360]	; (8006080 <_printf_i+0x23c>)
 8005f18:	230a      	movs	r3, #10
 8005f1a:	e012      	b.n	8005f42 <_printf_i+0xfe>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	6029      	str	r1, [r5, #0]
 8005f24:	0605      	lsls	r5, r0, #24
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0xe8>
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0xee>
 8005f2c:	0641      	lsls	r1, r0, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0xe4>
 8005f30:	881e      	ldrh	r6, [r3, #0]
 8005f32:	4853      	ldr	r0, [pc, #332]	; (8006080 <_printf_i+0x23c>)
 8005f34:	2f6f      	cmp	r7, #111	; 0x6f
 8005f36:	bf0c      	ite	eq
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	230a      	movne	r3, #10
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f42:	6865      	ldr	r5, [r4, #4]
 8005f44:	60a5      	str	r5, [r4, #8]
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	bfa2      	ittt	ge
 8005f4a:	6821      	ldrge	r1, [r4, #0]
 8005f4c:	f021 0104 	bicge.w	r1, r1, #4
 8005f50:	6021      	strge	r1, [r4, #0]
 8005f52:	b90e      	cbnz	r6, 8005f58 <_printf_i+0x114>
 8005f54:	2d00      	cmp	r5, #0
 8005f56:	d04b      	beq.n	8005ff0 <_printf_i+0x1ac>
 8005f58:	4615      	mov	r5, r2
 8005f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f62:	5dc7      	ldrb	r7, [r0, r7]
 8005f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f68:	4637      	mov	r7, r6
 8005f6a:	42bb      	cmp	r3, r7
 8005f6c:	460e      	mov	r6, r1
 8005f6e:	d9f4      	bls.n	8005f5a <_printf_i+0x116>
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10b      	bne.n	8005f8c <_printf_i+0x148>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	07de      	lsls	r6, r3, #31
 8005f78:	d508      	bpl.n	8005f8c <_printf_i+0x148>
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6861      	ldr	r1, [r4, #4]
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	bfde      	ittt	le
 8005f82:	2330      	movle	r3, #48	; 0x30
 8005f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f8c:	1b52      	subs	r2, r2, r5
 8005f8e:	6122      	str	r2, [r4, #16]
 8005f90:	f8cd a000 	str.w	sl, [sp]
 8005f94:	464b      	mov	r3, r9
 8005f96:	aa03      	add	r2, sp, #12
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f7ff fee4 	bl	8005d68 <_printf_common>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d14a      	bne.n	800603a <_printf_i+0x1f6>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	b004      	add	sp, #16
 8005faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	4833      	ldr	r0, [pc, #204]	; (8006084 <_printf_i+0x240>)
 8005fb8:	2778      	movs	r7, #120	; 0x78
 8005fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	061f      	lsls	r7, r3, #24
 8005fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc8:	d402      	bmi.n	8005fd0 <_printf_i+0x18c>
 8005fca:	065f      	lsls	r7, r3, #25
 8005fcc:	bf48      	it	mi
 8005fce:	b2b6      	uxthmi	r6, r6
 8005fd0:	07df      	lsls	r7, r3, #31
 8005fd2:	bf48      	it	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6029      	str	r1, [r5, #0]
 8005fda:	bf48      	it	mi
 8005fdc:	6023      	strmi	r3, [r4, #0]
 8005fde:	b91e      	cbnz	r6, 8005fe8 <_printf_i+0x1a4>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f023 0320 	bic.w	r3, r3, #32
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	2310      	movs	r3, #16
 8005fea:	e7a7      	b.n	8005f3c <_printf_i+0xf8>
 8005fec:	4824      	ldr	r0, [pc, #144]	; (8006080 <_printf_i+0x23c>)
 8005fee:	e7e4      	b.n	8005fba <_printf_i+0x176>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	e7bd      	b.n	8005f70 <_printf_i+0x12c>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	6826      	ldr	r6, [r4, #0]
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	1d18      	adds	r0, r3, #4
 8005ffc:	6028      	str	r0, [r5, #0]
 8005ffe:	0635      	lsls	r5, r6, #24
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	d501      	bpl.n	8006008 <_printf_i+0x1c4>
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0x1ca>
 8006008:	0670      	lsls	r0, r6, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0x1c0>
 800600c:	8019      	strh	r1, [r3, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	4615      	mov	r5, r2
 8006014:	e7bc      	b.n	8005f90 <_printf_i+0x14c>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	602a      	str	r2, [r5, #0]
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	2100      	movs	r1, #0
 8006022:	4628      	mov	r0, r5
 8006024:	f7fa f8d4 	bl	80001d0 <memchr>
 8006028:	b108      	cbz	r0, 800602e <_printf_i+0x1ea>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	e7aa      	b.n	8005f90 <_printf_i+0x14c>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	462a      	mov	r2, r5
 800603e:	4649      	mov	r1, r9
 8006040:	4640      	mov	r0, r8
 8006042:	47d0      	blx	sl
 8006044:	3001      	adds	r0, #1
 8006046:	d0ad      	beq.n	8005fa4 <_printf_i+0x160>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	079b      	lsls	r3, r3, #30
 800604c:	d413      	bmi.n	8006076 <_printf_i+0x232>
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	4298      	cmp	r0, r3
 8006054:	bfb8      	it	lt
 8006056:	4618      	movlt	r0, r3
 8006058:	e7a6      	b.n	8005fa8 <_printf_i+0x164>
 800605a:	2301      	movs	r3, #1
 800605c:	4632      	mov	r2, r6
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d09d      	beq.n	8005fa4 <_printf_i+0x160>
 8006068:	3501      	adds	r5, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	9903      	ldr	r1, [sp, #12]
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	42ab      	cmp	r3, r5
 8006072:	dcf2      	bgt.n	800605a <_printf_i+0x216>
 8006074:	e7eb      	b.n	800604e <_printf_i+0x20a>
 8006076:	2500      	movs	r5, #0
 8006078:	f104 0619 	add.w	r6, r4, #25
 800607c:	e7f5      	b.n	800606a <_printf_i+0x226>
 800607e:	bf00      	nop
 8006080:	08008df5 	.word	0x08008df5
 8006084:	08008e06 	.word	0x08008e06

08006088 <__sflush_r>:
 8006088:	898a      	ldrh	r2, [r1, #12]
 800608a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	4605      	mov	r5, r0
 8006090:	0710      	lsls	r0, r2, #28
 8006092:	460c      	mov	r4, r1
 8006094:	d458      	bmi.n	8006148 <__sflush_r+0xc0>
 8006096:	684b      	ldr	r3, [r1, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc05      	bgt.n	80060a8 <__sflush_r+0x20>
 800609c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dc02      	bgt.n	80060a8 <__sflush_r+0x20>
 80060a2:	2000      	movs	r0, #0
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d0f9      	beq.n	80060a2 <__sflush_r+0x1a>
 80060ae:	2300      	movs	r3, #0
 80060b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060b4:	682f      	ldr	r7, [r5, #0]
 80060b6:	6a21      	ldr	r1, [r4, #32]
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	d032      	beq.n	8006122 <__sflush_r+0x9a>
 80060bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	075a      	lsls	r2, r3, #29
 80060c2:	d505      	bpl.n	80060d0 <__sflush_r+0x48>
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	1ac0      	subs	r0, r0, r3
 80060c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ca:	b10b      	cbz	r3, 80060d0 <__sflush_r+0x48>
 80060cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ce:	1ac0      	subs	r0, r0, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	4602      	mov	r2, r0
 80060d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060d6:	6a21      	ldr	r1, [r4, #32]
 80060d8:	4628      	mov	r0, r5
 80060da:	47b0      	blx	r6
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	d106      	bne.n	80060f0 <__sflush_r+0x68>
 80060e2:	6829      	ldr	r1, [r5, #0]
 80060e4:	291d      	cmp	r1, #29
 80060e6:	d82b      	bhi.n	8006140 <__sflush_r+0xb8>
 80060e8:	4a29      	ldr	r2, [pc, #164]	; (8006190 <__sflush_r+0x108>)
 80060ea:	410a      	asrs	r2, r1
 80060ec:	07d6      	lsls	r6, r2, #31
 80060ee:	d427      	bmi.n	8006140 <__sflush_r+0xb8>
 80060f0:	2200      	movs	r2, #0
 80060f2:	6062      	str	r2, [r4, #4]
 80060f4:	04d9      	lsls	r1, r3, #19
 80060f6:	6922      	ldr	r2, [r4, #16]
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	d504      	bpl.n	8006106 <__sflush_r+0x7e>
 80060fc:	1c42      	adds	r2, r0, #1
 80060fe:	d101      	bne.n	8006104 <__sflush_r+0x7c>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b903      	cbnz	r3, 8006106 <__sflush_r+0x7e>
 8006104:	6560      	str	r0, [r4, #84]	; 0x54
 8006106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006108:	602f      	str	r7, [r5, #0]
 800610a:	2900      	cmp	r1, #0
 800610c:	d0c9      	beq.n	80060a2 <__sflush_r+0x1a>
 800610e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006112:	4299      	cmp	r1, r3
 8006114:	d002      	beq.n	800611c <__sflush_r+0x94>
 8006116:	4628      	mov	r0, r5
 8006118:	f7ff fa92 	bl	8005640 <_free_r>
 800611c:	2000      	movs	r0, #0
 800611e:	6360      	str	r0, [r4, #52]	; 0x34
 8006120:	e7c0      	b.n	80060a4 <__sflush_r+0x1c>
 8006122:	2301      	movs	r3, #1
 8006124:	4628      	mov	r0, r5
 8006126:	47b0      	blx	r6
 8006128:	1c41      	adds	r1, r0, #1
 800612a:	d1c8      	bne.n	80060be <__sflush_r+0x36>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0c5      	beq.n	80060be <__sflush_r+0x36>
 8006132:	2b1d      	cmp	r3, #29
 8006134:	d001      	beq.n	800613a <__sflush_r+0xb2>
 8006136:	2b16      	cmp	r3, #22
 8006138:	d101      	bne.n	800613e <__sflush_r+0xb6>
 800613a:	602f      	str	r7, [r5, #0]
 800613c:	e7b1      	b.n	80060a2 <__sflush_r+0x1a>
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	e7ad      	b.n	80060a4 <__sflush_r+0x1c>
 8006148:	690f      	ldr	r7, [r1, #16]
 800614a:	2f00      	cmp	r7, #0
 800614c:	d0a9      	beq.n	80060a2 <__sflush_r+0x1a>
 800614e:	0793      	lsls	r3, r2, #30
 8006150:	680e      	ldr	r6, [r1, #0]
 8006152:	bf08      	it	eq
 8006154:	694b      	ldreq	r3, [r1, #20]
 8006156:	600f      	str	r7, [r1, #0]
 8006158:	bf18      	it	ne
 800615a:	2300      	movne	r3, #0
 800615c:	eba6 0807 	sub.w	r8, r6, r7
 8006160:	608b      	str	r3, [r1, #8]
 8006162:	f1b8 0f00 	cmp.w	r8, #0
 8006166:	dd9c      	ble.n	80060a2 <__sflush_r+0x1a>
 8006168:	6a21      	ldr	r1, [r4, #32]
 800616a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800616c:	4643      	mov	r3, r8
 800616e:	463a      	mov	r2, r7
 8006170:	4628      	mov	r0, r5
 8006172:	47b0      	blx	r6
 8006174:	2800      	cmp	r0, #0
 8006176:	dc06      	bgt.n	8006186 <__sflush_r+0xfe>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e78e      	b.n	80060a4 <__sflush_r+0x1c>
 8006186:	4407      	add	r7, r0
 8006188:	eba8 0800 	sub.w	r8, r8, r0
 800618c:	e7e9      	b.n	8006162 <__sflush_r+0xda>
 800618e:	bf00      	nop
 8006190:	dfbffffe 	.word	0xdfbffffe

08006194 <_fflush_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	690b      	ldr	r3, [r1, #16]
 8006198:	4605      	mov	r5, r0
 800619a:	460c      	mov	r4, r1
 800619c:	b913      	cbnz	r3, 80061a4 <_fflush_r+0x10>
 800619e:	2500      	movs	r5, #0
 80061a0:	4628      	mov	r0, r5
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	b118      	cbz	r0, 80061ae <_fflush_r+0x1a>
 80061a6:	6a03      	ldr	r3, [r0, #32]
 80061a8:	b90b      	cbnz	r3, 80061ae <_fflush_r+0x1a>
 80061aa:	f7ff f8ff 	bl	80053ac <__sinit>
 80061ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f3      	beq.n	800619e <_fflush_r+0xa>
 80061b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061b8:	07d0      	lsls	r0, r2, #31
 80061ba:	d404      	bmi.n	80061c6 <_fflush_r+0x32>
 80061bc:	0599      	lsls	r1, r3, #22
 80061be:	d402      	bmi.n	80061c6 <_fflush_r+0x32>
 80061c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c2:	f7ff fa2c 	bl	800561e <__retarget_lock_acquire_recursive>
 80061c6:	4628      	mov	r0, r5
 80061c8:	4621      	mov	r1, r4
 80061ca:	f7ff ff5d 	bl	8006088 <__sflush_r>
 80061ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d0:	07da      	lsls	r2, r3, #31
 80061d2:	4605      	mov	r5, r0
 80061d4:	d4e4      	bmi.n	80061a0 <_fflush_r+0xc>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	059b      	lsls	r3, r3, #22
 80061da:	d4e1      	bmi.n	80061a0 <_fflush_r+0xc>
 80061dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061de:	f7ff fa1f 	bl	8005620 <__retarget_lock_release_recursive>
 80061e2:	e7dd      	b.n	80061a0 <_fflush_r+0xc>

080061e4 <__swbuf_r>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	460e      	mov	r6, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	4605      	mov	r5, r0
 80061ec:	b118      	cbz	r0, 80061f6 <__swbuf_r+0x12>
 80061ee:	6a03      	ldr	r3, [r0, #32]
 80061f0:	b90b      	cbnz	r3, 80061f6 <__swbuf_r+0x12>
 80061f2:	f7ff f8db 	bl	80053ac <__sinit>
 80061f6:	69a3      	ldr	r3, [r4, #24]
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	071a      	lsls	r2, r3, #28
 80061fe:	d525      	bpl.n	800624c <__swbuf_r+0x68>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	b31b      	cbz	r3, 800624c <__swbuf_r+0x68>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	6922      	ldr	r2, [r4, #16]
 8006208:	1a98      	subs	r0, r3, r2
 800620a:	6963      	ldr	r3, [r4, #20]
 800620c:	b2f6      	uxtb	r6, r6
 800620e:	4283      	cmp	r3, r0
 8006210:	4637      	mov	r7, r6
 8006212:	dc04      	bgt.n	800621e <__swbuf_r+0x3a>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f7ff ffbc 	bl	8006194 <_fflush_r>
 800621c:	b9e0      	cbnz	r0, 8006258 <__swbuf_r+0x74>
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	3b01      	subs	r3, #1
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	701e      	strb	r6, [r3, #0]
 800622c:	6962      	ldr	r2, [r4, #20]
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	429a      	cmp	r2, r3
 8006232:	d004      	beq.n	800623e <__swbuf_r+0x5a>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	07db      	lsls	r3, r3, #31
 8006238:	d506      	bpl.n	8006248 <__swbuf_r+0x64>
 800623a:	2e0a      	cmp	r6, #10
 800623c:	d104      	bne.n	8006248 <__swbuf_r+0x64>
 800623e:	4621      	mov	r1, r4
 8006240:	4628      	mov	r0, r5
 8006242:	f7ff ffa7 	bl	8006194 <_fflush_r>
 8006246:	b938      	cbnz	r0, 8006258 <__swbuf_r+0x74>
 8006248:	4638      	mov	r0, r7
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f806 	bl	8006260 <__swsetup_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0d5      	beq.n	8006204 <__swbuf_r+0x20>
 8006258:	f04f 37ff 	mov.w	r7, #4294967295
 800625c:	e7f4      	b.n	8006248 <__swbuf_r+0x64>
	...

08006260 <__swsetup_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4b2a      	ldr	r3, [pc, #168]	; (800630c <__swsetup_r+0xac>)
 8006264:	4605      	mov	r5, r0
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	460c      	mov	r4, r1
 800626a:	b118      	cbz	r0, 8006274 <__swsetup_r+0x14>
 800626c:	6a03      	ldr	r3, [r0, #32]
 800626e:	b90b      	cbnz	r3, 8006274 <__swsetup_r+0x14>
 8006270:	f7ff f89c 	bl	80053ac <__sinit>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800627a:	0718      	lsls	r0, r3, #28
 800627c:	d422      	bmi.n	80062c4 <__swsetup_r+0x64>
 800627e:	06d9      	lsls	r1, r3, #27
 8006280:	d407      	bmi.n	8006292 <__swsetup_r+0x32>
 8006282:	2309      	movs	r3, #9
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800628a:	81a3      	strh	r3, [r4, #12]
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	e034      	b.n	80062fc <__swsetup_r+0x9c>
 8006292:	0758      	lsls	r0, r3, #29
 8006294:	d512      	bpl.n	80062bc <__swsetup_r+0x5c>
 8006296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006298:	b141      	cbz	r1, 80062ac <__swsetup_r+0x4c>
 800629a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800629e:	4299      	cmp	r1, r3
 80062a0:	d002      	beq.n	80062a8 <__swsetup_r+0x48>
 80062a2:	4628      	mov	r0, r5
 80062a4:	f7ff f9cc 	bl	8005640 <_free_r>
 80062a8:	2300      	movs	r3, #0
 80062aa:	6363      	str	r3, [r4, #52]	; 0x34
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	2300      	movs	r3, #0
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	f043 0308 	orr.w	r3, r3, #8
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	b94b      	cbnz	r3, 80062dc <__swsetup_r+0x7c>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d2:	d003      	beq.n	80062dc <__swsetup_r+0x7c>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f899 	bl	800640e <__smakebuf_r>
 80062dc:	89a0      	ldrh	r0, [r4, #12]
 80062de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e2:	f010 0301 	ands.w	r3, r0, #1
 80062e6:	d00a      	beq.n	80062fe <__swsetup_r+0x9e>
 80062e8:	2300      	movs	r3, #0
 80062ea:	60a3      	str	r3, [r4, #8]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	425b      	negs	r3, r3
 80062f0:	61a3      	str	r3, [r4, #24]
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	b943      	cbnz	r3, 8006308 <__swsetup_r+0xa8>
 80062f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062fa:	d1c4      	bne.n	8006286 <__swsetup_r+0x26>
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	0781      	lsls	r1, r0, #30
 8006300:	bf58      	it	pl
 8006302:	6963      	ldrpl	r3, [r4, #20]
 8006304:	60a3      	str	r3, [r4, #8]
 8006306:	e7f4      	b.n	80062f2 <__swsetup_r+0x92>
 8006308:	2000      	movs	r0, #0
 800630a:	e7f7      	b.n	80062fc <__swsetup_r+0x9c>
 800630c:	20000084 	.word	0x20000084

08006310 <memmove>:
 8006310:	4288      	cmp	r0, r1
 8006312:	b510      	push	{r4, lr}
 8006314:	eb01 0402 	add.w	r4, r1, r2
 8006318:	d902      	bls.n	8006320 <memmove+0x10>
 800631a:	4284      	cmp	r4, r0
 800631c:	4623      	mov	r3, r4
 800631e:	d807      	bhi.n	8006330 <memmove+0x20>
 8006320:	1e43      	subs	r3, r0, #1
 8006322:	42a1      	cmp	r1, r4
 8006324:	d008      	beq.n	8006338 <memmove+0x28>
 8006326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800632e:	e7f8      	b.n	8006322 <memmove+0x12>
 8006330:	4402      	add	r2, r0
 8006332:	4601      	mov	r1, r0
 8006334:	428a      	cmp	r2, r1
 8006336:	d100      	bne.n	800633a <memmove+0x2a>
 8006338:	bd10      	pop	{r4, pc}
 800633a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800633e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006342:	e7f7      	b.n	8006334 <memmove+0x24>

08006344 <_sbrk_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d06      	ldr	r5, [pc, #24]	; (8006360 <_sbrk_r+0x1c>)
 8006348:	2300      	movs	r3, #0
 800634a:	4604      	mov	r4, r0
 800634c:	4608      	mov	r0, r1
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	f7fb f824 	bl	800139c <_sbrk>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_sbrk_r+0x1a>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_sbrk_r+0x1a>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	200006e8 	.word	0x200006e8

08006364 <_realloc_r>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4680      	mov	r8, r0
 800636a:	4614      	mov	r4, r2
 800636c:	460e      	mov	r6, r1
 800636e:	b921      	cbnz	r1, 800637a <_realloc_r+0x16>
 8006370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	4611      	mov	r1, r2
 8006376:	f7ff b9cf 	b.w	8005718 <_malloc_r>
 800637a:	b92a      	cbnz	r2, 8006388 <_realloc_r+0x24>
 800637c:	f7ff f960 	bl	8005640 <_free_r>
 8006380:	4625      	mov	r5, r4
 8006382:	4628      	mov	r0, r5
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	f000 f8a0 	bl	80064cc <_malloc_usable_size_r>
 800638c:	4284      	cmp	r4, r0
 800638e:	4607      	mov	r7, r0
 8006390:	d802      	bhi.n	8006398 <_realloc_r+0x34>
 8006392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006396:	d812      	bhi.n	80063be <_realloc_r+0x5a>
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff f9bc 	bl	8005718 <_malloc_r>
 80063a0:	4605      	mov	r5, r0
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0ed      	beq.n	8006382 <_realloc_r+0x1e>
 80063a6:	42bc      	cmp	r4, r7
 80063a8:	4622      	mov	r2, r4
 80063aa:	4631      	mov	r1, r6
 80063ac:	bf28      	it	cs
 80063ae:	463a      	movcs	r2, r7
 80063b0:	f7ff f937 	bl	8005622 <memcpy>
 80063b4:	4631      	mov	r1, r6
 80063b6:	4640      	mov	r0, r8
 80063b8:	f7ff f942 	bl	8005640 <_free_r>
 80063bc:	e7e1      	b.n	8006382 <_realloc_r+0x1e>
 80063be:	4635      	mov	r5, r6
 80063c0:	e7df      	b.n	8006382 <_realloc_r+0x1e>

080063c2 <__swhatbuf_r>:
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	460c      	mov	r4, r1
 80063c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ca:	2900      	cmp	r1, #0
 80063cc:	b096      	sub	sp, #88	; 0x58
 80063ce:	4615      	mov	r5, r2
 80063d0:	461e      	mov	r6, r3
 80063d2:	da0d      	bge.n	80063f0 <__swhatbuf_r+0x2e>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063da:	f04f 0100 	mov.w	r1, #0
 80063de:	bf0c      	ite	eq
 80063e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063e4:	2340      	movne	r3, #64	; 0x40
 80063e6:	2000      	movs	r0, #0
 80063e8:	6031      	str	r1, [r6, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	b016      	add	sp, #88	; 0x58
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	466a      	mov	r2, sp
 80063f2:	f000 f849 	bl	8006488 <_fstat_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	dbec      	blt.n	80063d4 <__swhatbuf_r+0x12>
 80063fa:	9901      	ldr	r1, [sp, #4]
 80063fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006400:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006404:	4259      	negs	r1, r3
 8006406:	4159      	adcs	r1, r3
 8006408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800640c:	e7eb      	b.n	80063e6 <__swhatbuf_r+0x24>

0800640e <__smakebuf_r>:
 800640e:	898b      	ldrh	r3, [r1, #12]
 8006410:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006412:	079d      	lsls	r5, r3, #30
 8006414:	4606      	mov	r6, r0
 8006416:	460c      	mov	r4, r1
 8006418:	d507      	bpl.n	800642a <__smakebuf_r+0x1c>
 800641a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	2301      	movs	r3, #1
 8006424:	6163      	str	r3, [r4, #20]
 8006426:	b002      	add	sp, #8
 8006428:	bd70      	pop	{r4, r5, r6, pc}
 800642a:	ab01      	add	r3, sp, #4
 800642c:	466a      	mov	r2, sp
 800642e:	f7ff ffc8 	bl	80063c2 <__swhatbuf_r>
 8006432:	9900      	ldr	r1, [sp, #0]
 8006434:	4605      	mov	r5, r0
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff f96e 	bl	8005718 <_malloc_r>
 800643c:	b948      	cbnz	r0, 8006452 <__smakebuf_r+0x44>
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	059a      	lsls	r2, r3, #22
 8006444:	d4ef      	bmi.n	8006426 <__smakebuf_r+0x18>
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	e7e3      	b.n	800641a <__smakebuf_r+0xc>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	6020      	str	r0, [r4, #0]
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	9b00      	ldr	r3, [sp, #0]
 800645e:	6163      	str	r3, [r4, #20]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	6120      	str	r0, [r4, #16]
 8006464:	b15b      	cbz	r3, 800647e <__smakebuf_r+0x70>
 8006466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f81e 	bl	80064ac <_isatty_r>
 8006470:	b128      	cbz	r0, 800647e <__smakebuf_r+0x70>
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	431d      	orrs	r5, r3
 8006482:	81a5      	strh	r5, [r4, #12]
 8006484:	e7cf      	b.n	8006426 <__smakebuf_r+0x18>
	...

08006488 <_fstat_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d07      	ldr	r5, [pc, #28]	; (80064a8 <_fstat_r+0x20>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fa ff58 	bl	800134a <_fstat>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_fstat_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_fstat_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	200006e8 	.word	0x200006e8

080064ac <_isatty_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d06      	ldr	r5, [pc, #24]	; (80064c8 <_isatty_r+0x1c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fa ff57 	bl	800136a <_isatty>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_isatty_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_isatty_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	200006e8 	.word	0x200006e8

080064cc <_malloc_usable_size_r>:
 80064cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d0:	1f18      	subs	r0, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bfbc      	itt	lt
 80064d6:	580b      	ldrlt	r3, [r1, r0]
 80064d8:	18c0      	addlt	r0, r0, r3
 80064da:	4770      	bx	lr

080064dc <_init>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	bf00      	nop
 80064e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e2:	bc08      	pop	{r3}
 80064e4:	469e      	mov	lr, r3
 80064e6:	4770      	bx	lr

080064e8 <_fini>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	bf00      	nop
 80064ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ee:	bc08      	pop	{r3}
 80064f0:	469e      	mov	lr, r3
 80064f2:	4770      	bx	lr
